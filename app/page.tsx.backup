"use client"
import { useState, useEffect, ChangeEvent, useMemo } from "react"
import {
  Patient,
  Prescription,
  PrescriptionFilters,
  NewPatientData,
  Transaction,
  Appointment,
  FormulaCalculations,
  BulkMedicationData,
  EScriptData,
  TransactionFilters,
  PrescriptionPatient,
} from "./types"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import {
  Package,
  Pill,
  Users,
  LayoutDashboard,
  Clock,
  CheckCircle,
  AlertCircle,
  UserCheck,
  Search,
  Calendar,
  CreditCard,
  Workflow,
  Calculator,
  Plus,
  X,
  Wrench,
} from "lucide-react"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { useIsMobile } from "@/hooks/use-mobile"
import ToolsPopup from "@/components/tools-popup"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Textarea } from "@/components/ui/textarea"
import { Checkbox } from "@/components/ui/checkbox"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { 
  User, 
  Stethoscope, 
  Building,
  Send,
  FileText,
  Printer,
  Copy,
  Eye,
  AlertTriangle,
  ArrowRight,
  ArrowLeft,
  Trophy,
  Medal,
  Crown,
  Star as StarIcon,
  Flag as FlagIcon,
  Bookmark as BookmarkIcon,
  Tag as TagIcon,
  Hash as HashIcon,
  AtSign as AtSignIcon,
  Percent as PercentIcon,
  PlusCircle,
  MinusCircle,
  XCircle,
  CheckCircle as CheckCircleIcon,
  AlertCircle as AlertCircleIcon,
  Info,
  HelpCircle,
  ExternalLink,
  Link,
  Link2,
  Unlink,
  Lock,
  Unlock,
  Eye as EyeIcon,
  EyeOff,
  Heart as HeartIcon,
  HeartOff,
  ThumbsUp,
  ThumbsDown,
  MessageCircle,
  MessageSquare,
  Send as SendIcon,
  Mail,
  Inbox,
  Archive,
  Trash,
  Save,
  Edit,
  Copy as CopyIcon,
  Undo,
  Redo,
  RotateCcw,
  RotateCw,
  ZoomIn,
  ZoomOut,
  Move,
  Crop,
  Type,
  Bold,
  Italic,
  Underline,
  Strikethrough,
  AlignLeft,
  AlignCenter,
  AlignRight,
  AlignJustify,
  List,
  ListOrdered,
  Quote,
  Code,
  Hash as HashIcon2,
  AtSign as AtSignIcon2,
  Percent as PercentIcon2,
  DollarSign as DollarSignIcon,
  Euro as EuroIcon,
  Bitcoin as BitcoinIcon,
  CreditCard as CreditCardIcon,
  Wallet as WalletIcon,
  PiggyBank as PiggyBankIcon,
  TrendingUp as TrendingUpIcon,
  TrendingDown as TrendingDownIcon,
  BarChart as BarChartIcon,
  LineChart as LineChartIcon,
  PieChart as PieChartIcon,
  ScatterChart as ScatterChartIcon,
  Activity as ActivityIcon2,
  Zap as ZapIcon2,
  Target as TargetIcon2,
  Award as AwardIcon,
  Trophy as TrophyIcon,
  Medal as MedalIcon,
  Crown as CrownIcon,
  Star as StarIcon2,
  Flag as FlagIcon2,
  Bookmark as BookmarkIcon2,
  Tag as TagIcon2,
  Hash as HashIcon3,
  AtSign as AtSignIcon3,
  Percent as PercentIcon3,
  PlusCircle as PlusCircleIcon,
  MinusCircle as MinusCircleIcon,
  XCircle as XCircleIcon,
  CheckCircle as CheckCircleIcon2,
  AlertCircle as AlertCircleIcon2,
  Info as InfoIcon,
  HelpCircle as HelpCircleIcon,
  ExternalLink as ExternalLinkIcon,
  Link as LinkIcon,
  Link2 as Link2Icon,
  Unlink as UnlinkIcon,
  Lock as LockIcon,
  Unlock as UnlockIcon,
  Eye as EyeIcon2,
  EyeOff as EyeOffIcon,
  Heart as HeartIcon2,
  HeartOff as HeartOffIcon,
  ThumbsUp as ThumbsUpIcon,
  ThumbsDown as ThumbsDownIcon,
  MessageCircle as MessageCircleIcon,
  MessageSquare as MessageSquareIcon,
  Send as SendIcon2,
  Mail as MailIcon,
  Inbox as InboxIcon,
  Archive as ArchiveIcon,
  Trash as TrashIcon,
  Save as SaveIcon,
  Edit as EditIcon,
  Copy as CopyIcon2,
  Undo as UndoIcon,
  Redo as RedoIcon,
  RotateCcw as RotateCcwIcon,
  RotateCw as RotateCwIcon,
  ZoomIn as ZoomInIcon,
  ZoomOut as ZoomOutIcon,
  Move as MoveIcon,
  Crop as CropIcon,
  Type as TypeIcon,
  Bold as BoldIcon,
  Italic as ItalicIcon,
  Underline as UnderlineIcon,
  Strikethrough as StrikethroughIcon,
  AlignLeft as AlignLeftIcon,
  AlignCenter as AlignCenterIcon,
  AlignRight as AlignRightIcon,
  AlignJustify as AlignJustifyIcon,
  List as ListIcon,
  ListOrdered as ListOrderedIcon,
  Quote as QuoteIcon,
  Code as CodeIcon,
  Hash as HashIcon4,
  AtSign as AtSignIcon4,
  Percent as PercentIcon4,
  DollarSign as DollarSignIcon2,
  Euro as EuroIcon2,
  Bitcoin as BitcoinIcon2,
  CreditCard as CreditCardIcon2,
  Wallet as WalletIcon2,
  PiggyBank as PiggyBankIcon2,
  TrendingUp as TrendingUpIcon2,
  TrendingDown as TrendingDownIcon2,
  BarChart as BarChartIcon2,
  LineChart as LineChartIcon2,
  PieChart as PieChartIcon2,
  ScatterChart as ScatterChartIcon2,
  Activity as ActivityIcon3,
  Zap as ZapIcon3,
  Target as TargetIcon3,
  Award as AwardIcon2,
  Trophy as TrophyIcon2,
  Medal as MedalIcon2,
  Crown as CrownIcon2,
  Star as StarIcon3,
  Flag as FlagIcon3,
  Bookmark as BookmarkIcon3,
  Tag as TagIcon3,
} from "lucide-react"

const MAIN_HEADERS = [
  { id: "orders", title: "Orders", icon: Package },
  { id: "account", title: "Account", icon: User },
  { id: "patients", title: "Patients", icon: Users },
  { id: "rxforms", title: "RX Forms", icon: FileText },
  { id: "catalog", title: "Catalog", icon: BookmarkIcon },
  { id: "scheduling", title: "Appointment Scheduling", icon: Calendar },
  { id: "contactdca", title: "Contact DCA", icon: MessageCircle },
]

export default function FacilitiesPortal() {
  const isMobile = useIsMobile()
  const [activeHeader, setActiveHeader] = useState<string>("dashboard")
  const [showUserMenu, setShowUserMenu] = useState<boolean>(false)
  const [sidebarCollapsed, setSidebarCollapsed] = useState<boolean>(isMobile)
  const [showSettings, setShowSettings] = useState<boolean>(false)
  const [showTools, setShowTools] = useState<boolean>(false)
  const [activeARTab, setActiveARTab] = useState<string>("search")
  const [arSearchQuery, setArSearchQuery] = useState<string>("")
  const [selectedPatients, setSelectedPatients] = useState<number[]>([])
  const [showBulkMedication, setShowBulkMedication] = useState<boolean>(false)
  const [bulkMedicationData, setBulkMedicationData] = useState<BulkMedicationData>({
    medication: "",
    dosage: "",
    frequency: "",
    duration: "",
    instructions: "",
    prescriber: "",
  })
  const [showPatientDetails, setShowPatientDetails] = useState<boolean>(false)
  const [selectedPatientId, setSelectedPatientId] = useState<number | null>(null)
  const [activePatientTab, setActivePatientTab] = useState<string>("contact")
  const [showPrescriptionDetails, setShowPrescriptionDetails] = useState<boolean>(false)
  const [selectedPrescription, setSelectedPrescription] = useState<Prescription | null>(null)
  const [showPrescriptionPatients, setShowPrescriptionPatients] = useState<boolean>(false)
  const [prescriptionPatients, setPrescriptionPatients] = useState<PrescriptionPatient[]>([])
  const [showAddPatientToPrescription, setShowAddPatientToPrescription] = useState<boolean>(false)
  const [patientSearchQuery, setPatientSearchQuery] = useState<string>("")
  const [filteredPatients, setFilteredPatients] = useState<Patient[]>([])
  const [transactionFilters, setTransactionFilters] = useState<TransactionFilters>({
    activity: "all",
    dateFrom: "",
    dateTo: "",
    patient: "",
    rxNumber: "",
    include: "all",
    statementDate: "",
    transactionType: "",
    paymentType: "",
    paymentRef: "",
    amount: "",
    transactionOrigin: "",
    originReference: "",
    prescriberGroup: "",
    priority: "all",
  })
  const [showResults, setShowResults] = useState<boolean>(false)
  const [transactionResults, setTransactionResults] = useState<Transaction[]>([])
  const [formulaCalculations, setFormulaCalculations] = useState<FormulaCalculations>({
    patientWeight: "",
    dosePerKg: "",
    frequency: "1",
    calculatedDose: 0,
    quantity: "",
    dailyDose: "",
    daySupply: 0,
    desiredStrength: "",
    availableStrength: "",
    desiredVolume: "",
    requiredVolume: 0,
    strongerPercent: "",
    weakerPercent: "",
    desiredPercent: "",
    strongerParts: 0,
    weakerParts: 0,
    costPerUnit: "",
    markup: "",
    sellingPrice: 0,
    profit: 0,
  })

  const [prescriptionFilters, setPrescriptionFilters] = useState<PrescriptionFilters>({
    status: "all",
    search: "",
    prescriber: "",
    patient: "",
    dateFrom: "",
    dateTo: "",
  })
  const [showNewEScript, setShowNewEScript] = useState<boolean>(false)
  const [eScriptStep, setEScriptStep] = useState<number>(1)
  const [eScriptData, setEScriptData] = useState<EScriptData>({
    patient: "",
    prescriber: "",
    medication: "",
    strength: "",
    quantity: "",
    directions: "",
    refills: "",
    daw: false,
    priority: "routine",
    notes: "",
  })
  const [showNewPatient, setShowNewPatient] = useState<boolean>(false)
  const [currentStep, setCurrentStep] = useState<number>(1)
  const [canSend, setCanSend] = useState<boolean>(false)
  const [newPatientData, setNewPatientData] = useState<NewPatientData>({
    // Basic Info
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    dateOfBirth: "",
    gender: "",

    // Address
    address1: "",
    address2: "",
    city: "",
    state: "",
    zip: "",
    country: "USA",

    // Contact Preferences
    notificationPreference: "email", // email, sms, phone, mail
    emergencyContactName: "",
    emergencyContactPhone: "",
    emergencyContactRelation: "",

    // Medical Info
    allergies: "",
    medicalConditions: "",
    currentMedications: "",

    // Account Settings
    refillRenewStatus: "active", // active, inactive, suspended
    defaultPriority: "medium", // low, medium, high
    deliveryMethod: "pickup", // pickup, delivery, mail

    // Identification
    bioImage: null,
    driversLicenseState: "",
    driversLicenseNumber: "",
    driversLicenseExpiration: "",
    driversLicenseFront: null,
    driversLicenseBack: null,
    mbi: "",
    ssn: "",
    alternateId: "",
    identificationExpiration: "",
    externalId: "",

    // Financial Information
    paymentMethod: "credit", // credit, ach, cash
    // Credit Card Info
    creditCardType: "",
    'creditCardNumber': "",
    creditCardExpiration: "",
    creditCardCVV: "",
    creditCardHolderName: "",
    creditCardBillingAddress: "",
    creditCardBillingCity: "",
    creditCardBillingState: "",
    creditCardBillingZip: "",
    // ACH Info
    achAccountType: "", // checking, savings, business-checking, business-savings
    achBankName: "",
    achRoutingNumber: "",
    achAccountNumber: "",
    achAccountHolderName: "",
    achBankAddress: "",
    achBankCity: "",
    achBankState: "",
    achBankZip: "",

    // Additional Info
    criticalComments: "",
    facility: "Main Location",
    rxHistory: [],
  })

  const [selectedDate, setSelectedDate] = useState<string>(new Date().toISOString().split("T")[0])
  const [showDayAppointments, setShowDayAppointments] = useState<boolean>(false)
  const [dayAppointments, setDayAppointments] = useState<Appointment[]>([])
  const [showPatientMedications, setShowPatientMedications] = useState<boolean>(false)
  const [showPatientPrescriptions, setShowPatientPrescriptions] = useState<boolean>(false)

  // Settings Modal State
  const [settingsTab, setSettingsTab] = useState('profile')
  const [selectedDateRange, setSelectedDateRange] = useState('today')
  const [showNewRxModal, setShowNewRxModal] = useState(false)
  const [showInProcessRx, setShowInProcessRx] = useState(false)
  const [newRxStep, setNewRxStep] = useState(1)
  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null)
  const [showNewPatientForm, setShowNewPatientForm] = useState(false)
  const [billShipPreference, setBillShipPreference] = useState<'BF/SP' | 'BF/SF' | 'SF/BP' | 'SF/BF'>('BF/SP')
  const [selectedPrescriber, setSelectedPrescriber] = useState('')
  const [selectedRxStatus, setSelectedRxStatus] = useState('all')

  useEffect(() => {
    setSidebarCollapsed(isMobile)
  }, [isMobile])

  const userProfile = {
    name: "Amanda Rodriguez",
    role: "Pharmacy Manager",
    avatar: "/placeholder-user.jpg",
  }

  const statusCards = [
    { title: "Patient Rx", value: 47, status: "New", icon: Clock, links: ["New", "In Progress"] },
    { title: "Office Order", value: 23, status: "New", icon: CheckCircle, links: ["New", "In Progress"] },
    { title: "Missing Information Alert", value: 8, status: "Alert", icon: AlertCircle },
    { title: "Complete Track", value: 124, status: "Complete", icon: UserCheck },
  ]

  const getStatusColor = (status: string) => {
    switch (status) {
      case "In Progress":
        return "bg-yellow-100 text-yellow-800"
      case "Ready":
        return "bg-green-100 text-green-800"
      case "Alert":
        return "bg-red-100 text-red-800"
      case "Verified":
        return "bg-blue-100 text-blue-800"
      case "New":
        return "bg-blue-100 text-blue-800"
      case "Complete":
        return "bg-green-100 text-green-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const inventoryItems = [
    { name: "Metformin 500mg", expiry: "06/20/2025", stock: 120, minimum: 50, status: "In Stock" },
    { name: "Lisinopril 10mg", expiry: "07/15/2025", stock: 35, minimum: 40, status: "Low Stock" },
    { name: "Atorvastatin 20mg", expiry: "08/01/2025", stock: 15, minimum: 20, status: "Out of Stock" },
    { name: "Simvastatin 40mg", expiry: "09/10/2025", stock: 80, minimum: 30, status: "In Stock" },
  ]

  const getStockColor = (status: string) => {
    switch (status) {
      case "In Stock":
        return "bg-green-100 text-green-800"
      case "Low Stock":
        return "bg-yellow-100 text-yellow-800"
      case "Out of Stock":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getAccountStatusColor = (status: string) => {
    switch (status) {
      case "Active":
        return "bg-green-100 text-green-800"
      case "Pending":
        return "bg-yellow-100 text-yellow-800"
      case "Suspended":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "Urgent":
        return "bg-red-100 text-red-800"
      case "Routine":
        return "bg-blue-100 text-blue-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getOrderStatusColor = (status: string) => {
    switch (status) {
      case "Processing":
        return "bg-blue-100 text-blue-800"
      case "Ready":
        return "bg-green-100 text-green-800"
      case "Completed":
        return "bg-green-100 text-green-800"
      case "On Hold":
        return "bg-yellow-100 text-yellow-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getPaymentStatusColor = (status: string) => {
    switch (status) {
      case "Paid":
        return "bg-green-100 text-green-800"
      case "Pending":
        return "bg-yellow-100 text-yellow-800"
      case "Overdue":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const recentSearches = [
    "Inspire Medical Group",
    "Serotonin Centers",
    "Direct Medical Care",
    "Home Therapeutics",
    "Wellness Institute",
  ]

  const facilityOrders = [
    {
      id: 1,
      orderDate: "12/18/2024",
      orderNumber: "ORD-001234",
      accountStatus: "Active",
      patientName: "John Smith",
      medication: "Testosterone 200mg/ml",
      quantity: "10ml vial",
      prescriber: "Dr. Johnson",
      priority: "Routine",
      orderStatus: "Processing",
      paymentStatus: "Paid"
    },
    {
      id: 2,
      orderDate: "12/17/2024",
      orderNumber: "ORD-001235",
      accountStatus: "Pending",
      patientName: "Sarah Johnson",
      medication: "Estradiol 2mg",
      quantity: "30 tablets",
      prescriber: "Dr. Williams",
      priority: "Urgent",
      orderStatus: "Ready",
      paymentStatus: "Pending"
    },
    {
      id: 3,
      orderDate: "12/16/2024",
      orderNumber: "ORD-001236",
      accountStatus: "Active",
      patientName: "Mike Davis",
      medication: "Metformin 1000mg",
      quantity: "60 tablets",
      prescriber: "Dr. Brown",
      priority: "Routine",
      orderStatus: "Completed",
      paymentStatus: "Paid"
    },
    {
      id: 4,
      orderDate: "12/15/2024",
      orderNumber: "ORD-001237",
      accountStatus: "Suspended",
      patientName: "Lisa Wilson",
      medication: "Lisinopril 10mg",
      quantity: "30 tablets",
      prescriber: "Dr. Garcia",
      priority: "Routine",
      orderStatus: "On Hold",
      paymentStatus: "Overdue"
    },
    {
      id: 5,
      orderDate: "12/14/2024",
      orderNumber: "ORD-001238",
      accountStatus: "Active",
      patientName: "Robert Brown",
      medication: "Atorvastatin 20mg",
      quantity: "30 tablets",
      prescriber: "Dr. Martinez",
      priority: "Routine",
      orderStatus: "Processing",
      paymentStatus: "Paid"
    },
    {
      id: 6,
      orderDate: "12/13/2024",
      orderNumber: "ORD-001239",
      accountStatus: "Active",
      patientName: "Emily Green",
      medication: "Levothyroxine 50mcg",
      quantity: "30 tablets",
      prescriber: "Dr. Anderson",
      priority: "Urgent",
      orderStatus: "Ready",
      paymentStatus: "Paid"
    }
  ]

  const inProcessRxOrders = [
    {
      id: 1,
      patientName: "John Smith",
      patientPhone: "(555) 123-4567",
      medication: "Testosterone 200mg/ml",
      quantity: "10ml vial",
      prescriber: "Dr. Johnson",
      status: "Waiting for Input",
      date: "12/18/2024"
    },
    {
      id: 2,
      patientName: "Sarah Johnson",
      patientPhone: "(555) 234-5678",
      medication: "Estradiol 2mg",
      quantity: "30 tablets",
      prescriber: "Dr. Williams",
      status: "Waiting for Payment",
      date: "12/17/2024"
    },
    {
      id: 3,
      patientName: "Mike Davis",
      patientPhone: "(555) 345-6789",
      medication: "Metformin 1000mg",
      quantity: "60 tablets",
      prescriber: "Dr. Brown",
      status: "Missing Information",
      date: "12/16/2024"
    },
    {
      id: 4,
      patientName: "Lisa Wilson",
      patientPhone: "(555) 456-7890",
      medication: "Lisinopril 10mg",
      quantity: "30 tablets",
      prescriber: "Dr. Garcia",
      status: "Pre-Check",
      date: "12/15/2024"
    },
    {
      id: 5,
      patientName: "Robert Brown",
      patientPhone: "(555) 567-8901",
      medication: "Atorvastatin 20mg",
      quantity: "30 tablets",
      prescriber: "Dr. Martinez",
      status: "Being Filled",
      date: "12/14/2024"
    },
    {
      id: 6,
      patientName: "Emily Green",
      patientPhone: "(555) 678-9012",
      medication: "Levothyroxine 50mcg",
      quantity: "30 tablets",
      prescriber: "Dr. Anderson",
      status: "Complete",
      date: "12/13/2024"
    }
  ]

  const getRxStatusColor = (status: string) => {
    switch (status) {
      case "Waiting for Input":
        return "bg-yellow-100 text-yellow-800"
      case "Waiting for Payment":
        return "bg-orange-100 text-orange-800"
      case "Missing Information":
        return "bg-red-100 text-red-800"
      case "Pre-Check":
        return "bg-blue-100 text-blue-800"
      case "Being Filled":
        return "bg-purple-100 text-purple-800"
      case "Complete":
        return "bg-green-100 text-green-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  // All patients data for search functionality
  const allPatients: Patient[] = useMemo(
    () => [
      {
        id: 1,
        name: "John Smith",
        email: "john.smith@email.com",
        phone: "(555) 123-4567",
        lastVisit: "12/18/2024",
        status: "Active",
      },
      {
        id: 2,
        name: "Sarah Johnson",
        email: "sarah.j@email.com",
        phone: "(555) 234-5678",
        lastVisit: "12/17/2024",
        status: "Active",
      },
      {
        id: 3,
        name: "Mike Davis",
        email: "mike.davis@email.com",
        phone: "(555) 345-6789",
        lastVisit: "12/16/2024",
        status: "Active",
      },
      {
        id: 4,
        name: "Lisa Wilson",
        email: "lisa.w@email.com",
        phone: "(555) 456-7890",
        lastVisit: "12/15/2024",
        status: "Inactive",
      },
      {
        id: 5,
        name: "Robert Brown",
        email: "robert.b@email.com",
        phone: "(555) 567-8901",
        lastVisit: "12/14/2024",
        status: "Active",
      },
      {
        id: 6,
        name: "Emily Green",
        email: "emily.g@email.com",
        phone: "(555) 678-9012",
        lastVisit: "12/13/2024",
        status: "Active",
      },
      {
        id: 7,
        name: "David White",
        email: "david.w@email.com",
        phone: "(555) 789-0123",
        lastVisit: "12/12/2024",
        status: "Inactive",
      },
      {
        id: 8,
        name: "Ashley Black",
        email: "ashley.b@email.com",
        phone: "(555) 890-1234",
        lastVisit: "12/11/2024",
        status: "Active",
      },
      {
        id: 9,
        name: "Kevin Gray",
        email: "kevin.g@email.com",
        phone: "(555) 901-2345",
        lastVisit: "12/10/2024",
        status: "Active",
      },
      {
        id: 10,
        name: "Jessica Blue",
        email: "jessica.b@email.com",
        phone: "(555) 012-3456",
        lastVisit: "12/09/2024",
        status: "Inactive",
      },
    ],
    [],
  )

  const handleHeaderChange = (headerId: string) => {
    setActiveHeader(headerId)
    setShowUserMenu(false)
    setShowSettings(false)
  }

  const handleTransactionSearch = () => {
    const mockTransactions: Transaction[] = [
      {
        id: "TXN-001",
        date: "12/18/2024",
        patient: "John Smith",
        type: "Payment",
        amount: "$125.00",
        method: "Credit Card",
        status: "Completed",
        rxNumber: "RX001234",
        priority: "BFSP",
        transactionOrigin: "Online",
        originReference: "WEB-12345",
        prescriberGroup: "Endocrinology Associates",
        paymentRef: "CC-789012",
        statementDate: "12/15/2024",
      },
      {
        id: "TXN-002",
        date: "12/18/2024",
        patient: "Sarah Johnson",
        type: "Charge",
        amount: "$89.50",
        method: "Insurance",
        status: "Pending",
        rxNumber: "RX001235",
        priority: "BPSF",
        transactionOrigin: "In-Store",
        originReference: "POS-67890",
        prescriberGroup: "Women's Health Clinic",
        paymentRef: "INS-345678",
        statementDate: "12/15/2024",
      },
      {
        id: "TXN-003",
        date: "12/17/2024",
        patient: "Mike Davis",
        type: "Adjustment",
        amount: "-$15.00",
        method: "Credit Adjustment",
        status: "Completed",
        rxNumber: "RX001236",
        priority: "URGENT",
        transactionOrigin: "Phone",
        originReference: "CALL-11223",
        prescriberGroup: "Internal Medicine Group",
        paymentRef: "ADJ-901234",
        statementDate: "12/15/2024",
      },
      {
        id: "TXN-004",
        date: "12/16/2024",
        patient: "Lisa Wilson",
        type: "Refund",
        amount: "-$45.75",
        method: "ACH",
        status: "Processing",
        rxNumber: "RX001237",
        priority: "ROUTINE",
        transactionOrigin: "Online",
        originReference: "WEB-44556",
        prescriberGroup: "Pain Management Center",
        paymentRef: "ACH-567890",
        statementDate: "12/15/2024",
      },
    ]
    setTransactionResults(mockTransactions)
    setShowResults(true)
  }

  const handleShowPrescriptionDetails = (prescription: Prescription) => {
    setSelectedPrescription(prescription)
    setShowPrescriptionDetails(true)
  }

  const handleShowPrescriptionPatients = (prescription: Prescription) => {
    const mockPatients: PrescriptionPatient[] = [
      {
        id: 1,
        name: "John Smith",
        email: "john.smith@email.com",
        phone: "(555) 123-4567",
        prescribedDate: "12/18/2024",
        dosage: "200mg/ml",
        frequency: "Once daily",
        status: "Active",
      },
    ]
    setPrescriptionPatients(mockPatients)
    setShowPrescriptionPatients(true)
  }

  // Filter patients based on search query
  useEffect(() => {
    if (patientSearchQuery.trim() === "") {
      setFilteredPatients([])
    } else {
      const filtered = allPatients.filter(
        (patient) =>
          patient.name.toLowerCase().includes(patientSearchQuery.toLowerCase()) ||
          patient.email.toLowerCase().includes(patientSearchQuery.toLowerCase()) ||
          patient.phone.includes(patientSearchQuery),
      )
      setFilteredPatients(filtered)
    }
  }, [patientSearchQuery, allPatients])

  const handleAddPatientToPrescription = (patient: Patient) => {
    // Add patient to prescription patients list
    const newPatient: PrescriptionPatient = {
      ...patient,
      prescribedDate: new Date().toLocaleDateString(),
      dosage: selectedPrescription?.strength || "N/A",
      frequency: "As prescribed",
      status: "Active",
    }
    setPrescriptionPatients((prev: PrescriptionPatient[]) => [...prev, newPatient])
    setShowAddPatientToPrescription(false)
    setPatientSearchQuery("")
    setFilteredPatients([])
  }

  const handleDateClick = (date: string) => {
    setSelectedDate(date)
    // Mock appointments for the selected date
    const mockAppointments: Appointment[] = [
      {
        id: 1,
        time: "9:00 AM",
        patient: "John Smith",
        type: "Consultation",
        duration: "30 min",
        status: "Confirmed",
        notes: "Follow-up appointment",
      },
      {
        id: 2,
        time: "10:30 AM",
        patient: "Sarah Johnson",
        type: "Check-up",
        duration: "45 min",
        status: "Confirmed",
        notes: "Regular health check",
      },
      {
        id: 3,
        time: "2:00 PM",
        patient: "Mike Davis",
        type: "Prescription Review",
        duration: "20 min",
        status: "Pending",
        notes: "Medication adjustment needed",
      },
    ]
    setDayAppointments(mockAppointments)
    setShowDayAppointments(true)
  }

  const renderFormulaCalculator = () => {
    const calculateDosage = () => {
      const weight = Number.parseFloat(formulaCalculations.patientWeight) || 0
      const dosePerKg = Number.parseFloat(formulaCalculations.dosePerKg) || 0
      const frequency = Number.parseFloat(formulaCalculations.frequency) || 1
      const dose = weight * dosePerKg * frequency
      setFormulaCalculations((prev: FormulaCalculations) => ({ ...prev, calculatedDose: dose }))
    }

    const calculateDaySupply = () => {
      const quantity = Number.parseFloat(formulaCalculations.quantity) || 0
      const dailyDose = Number.parseFloat(formulaCalculations.dailyDose) || 0
      const daySupply = dailyDose > 0 ? quantity / dailyDose : 0
      setFormulaCalculations((prev: FormulaCalculations) => ({ ...prev, daySupply: daySupply }))
    }

    const calculateConcentration = () => {
      const desired = Number.parseFloat(formulaCalculations.desiredStrength) || 0
      const available = Number.parseFloat(formulaCalculations.availableStrength) || 0
      const volume = Number.parseFloat(formulaCalculations.desiredVolume) || 0
      const required = available > 0 ? (desired * volume) / available : 0
      setFormulaCalculations((prev: FormulaCalculations) => ({ ...prev, requiredVolume: required }))
    }

    const calculateAlligation = () => {
      const stronger = Number.parseFloat(formulaCalculations.strongerPercent) || 0
      const weaker = Number.parseFloat(formulaCalculations.weakerPercent) || 0
      const desired = Number.parseFloat(formulaCalculations.desiredPercent) || 0

      if (stronger > weaker && desired > weaker && desired < stronger) {
        const strongerParts = desired - weaker
        const weakerParts = stronger - desired
        setFormulaCalculations(
          (
            prev: FormulaCalculations,
          ): FormulaCalculations => ({
            ...prev,
            strongerParts: strongerParts,
            weakerParts: weakerParts,
          }),
        )
      }
    }

    const calculateBusiness = () => {
      const cost = Number.parseFloat(formulaCalculations.costPerUnit) || 0
      const markup = Number.parseFloat(formulaCalculations.markup) || 0
      const selling = cost * (1 + markup / 100)
      const profit = selling - cost
      setFormulaCalculations(
        (
          prev: FormulaCalculations,
        ): FormulaCalculations => ({
          ...prev,
          sellingPrice: selling,
          profit: profit,
        }),
      )
    }

    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h2 className="text-3xl font-bold">Formula Calculator</h2>
          <div className="flex items-center gap-4">
            <Button variant="outline" size="sm">
              <Calculator className="h-4 w-4 mr-2" />
              Save Calculations
            </Button>
            <Button variant="outline" size="sm">
              Print Results
            </Button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>Dosage Calculator</CardTitle>
              <CardDescription>Calculate patient-specific dosages based on weight</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label>Patient Weight (kg)</Label>
                  <Input
                    type="number"
                    value={formulaCalculations.patientWeight}
                    onChange={(e: ChangeEvent<HTMLInputElement>) =>
                      setFormulaCalculations((prev: FormulaCalculations) => ({ ...prev, patientWeight: e.target.value }))
                    }
                    placeholder="70"
                  />
                </div>
                <div className="space-y-2">
                  <Label>Dose per kg (mg/kg)</Label>
                  <Input
                    type="number"
                    value={formulaCalculations.dosePerKg}
                    onChange={(e: ChangeEvent<HTMLInputElement>) =>
                      setFormulaCalculations((prev: FormulaCalculations) => ({ ...prev, dosePerKg: e.target.value }))
                    }
                    placeholder="5"
                  />
                </div>
                <div className="space-y-2">
                  <Label>Frequency (times/day)</Label>
                  <Select
                    value={formulaCalculations.frequency}
                    onValueChange={(value: string) =>
                      setFormulaCalculations((prev: FormulaCalculations) => ({ ...prev, frequency: value }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="1">Once daily</SelectItem>
                      <SelectItem value="2">Twice daily</SelectItem>
                      <SelectItem value="3">Three times daily</SelectItem>
                      <SelectItem value="4">Four times daily</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label>Calculated Dose</Label>
                  <div className="p-3 bg-blue-50 rounded-md">
                    <span className="text-lg font-semibold text-blue-800">
                      {formulaCalculations.calculatedDose.toFixed(2)} mg/day
                    </span>
                  </div>
                </div>
              </div>
              <Button onClick={calculateDosage} className="w-full bg-red-800 hover:bg-red-900">
                Calculate Dosage
              </Button>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Day Supply Calculator</CardTitle>
              <CardDescription>Calculate how many days a prescription will last</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label>Total Quantity</Label>
                  <Input
                    type="number"
                    value={formulaCalculations.quantity}
                    onChange={(e: ChangeEvent<HTMLInputElement>) =>
                      setFormulaCalculations((prev: FormulaCalculations) => ({ ...prev, quantity: e.target.value }))
                    }
                    placeholder="30"
                  />
                </div>
                <div className="space-y-2">
                  <Label>Daily Dose</Label>
                  <Input
                    type="number"
                    value={formulaCalculations.dailyDose}
                    onChange={(e: ChangeEvent<HTMLInputElement>) =>
                      setFormulaCalculations((prev: FormulaCalculations) => ({ ...prev, dailyDose: e.target.value }))
                    }
                    placeholder="1"
                  />
                </div>
                <div className="space-y-2 col-span-2">
                  <Label>Day Supply</Label>
                  <div className="p-3 bg-green-50 rounded-md">
                    <span className="text-lg font-semibold text-green-800">
                      {formulaCalculations.daySupply.toFixed(0)} days
                    </span>
                  </div>
                </div>
              </div>
              <Button onClick={calculateDaySupply} className="w-full bg-red-800 hover:bg-red-900">
                Calculate Day Supply
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    )
  }

  const renderDashboard = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-3xl font-bold"></h2>
        <div className="flex items-center gap-4">
          <Button variant="outline" size="sm">
            <Calendar className="h-4 w-4 mr-2" />
            Today
          </Button>
          <Button variant="outline" size="sm">
            Export
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {statusCards.map((card, index) => {
          const IconComponent = card.icon
          return (
            <Card key={index}>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">{card.title}</CardTitle>
                <IconComponent className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{card.value}</div>
                <Badge className={`mt-2 ${getStatusColor(card.status)}`}>{card.status}</Badge>
                {card.links && (
                  <div className="flex gap-2 mt-2">
                    {card.links.map((link, linkIndex) => (
                      <Button 
                        key={linkIndex} 
                        variant="link" 
                        size="sm" 
                        className="p-0 h-auto text-xs text-blue-600 hover:text-blue-800"
                        onClick={() => {
                          if (card.title === "Patient Rx") {
                            if (link === "New") {
                              setShowNewRxModal(true)
                              setNewRxStep(1)
                            } else if (link === "In Progress") {
                              setShowInProcessRx(true)
                            }
                          }
                        }}
                      >
                        {link}
                      </Button>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          )
        })}
      </div>

      {/* Date Filter Component */}
      <Card>
        <CardHeader>
          <CardTitle>Filter Orders by Date Range</CardTitle>
          <CardDescription>Select a time period to view facility orders</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-2">
            {[
              { label: "Today", value: "today" },
              { label: "Last 7 Days", value: "7days" },
              { label: "Last 14 Days", value: "14days" },
              { label: "This Month", value: "month" },
              { label: "Last 6 Months", value: "6months" },
              { label: "Last 12 Months", value: "12months" },
            ].map((period) => (
              <Button
                key={period.value}
                variant={selectedDateRange === period.value ? "default" : "outline"}
                size="sm"
                onClick={() => setSelectedDateRange(period.value)}
                className={selectedDateRange === period.value ? "bg-red-800 hover:bg-red-900" : ""}
              >
                {period.label}
              </Button>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Facility Orders Table */}
      <Card>
        <CardHeader>
          <CardTitle>Facility Orders</CardTitle>
          <CardDescription>Complete list of pharmacy orders and their status</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b">
                  <th className="text-left p-2 font-medium">Order Date</th>
                  <th className="text-left p-2 font-medium">Order #</th>
                  <th className="text-left p-2 font-medium">Account Status</th>
                  <th className="text-left p-2 font-medium">Patient Name</th>
                  <th className="text-left p-2 font-medium">Medication</th>
                  <th className="text-left p-2 font-medium">Quantity</th>
                  <th className="text-left p-2 font-medium">Prescriber</th>
                  <th className="text-left p-2 font-medium">Priority</th>
                  <th className="text-left p-2 font-medium">Order Status</th>
                  <th className="text-left p-2 font-medium">Payment Status</th>
                  <th className="text-left p-2 font-medium">Actions</th>
                </tr>
              </thead>
              <tbody>
                {facilityOrders.map((order) => (
                  <tr key={order.id} className="border-b hover:bg-gray-50">
                    <td className="p-2 text-sm">{order.orderDate}</td>
                    <td className="p-2 text-sm font-medium">{order.orderNumber}</td>
                    <td className="p-2">
                      <Badge className={getAccountStatusColor(order.accountStatus)}>
                        {order.accountStatus}
                      </Badge>
                    </td>
                    <td className="p-2 text-sm">{order.patientName}</td>
                    <td className="p-2 text-sm">{order.medication}</td>
                    <td className="p-2 text-sm">{order.quantity}</td>
                    <td className="p-2 text-sm">{order.prescriber}</td>
                    <td className="p-2">
                      <Badge className={getPriorityColor(order.priority)}>
                        {order.priority}
                      </Badge>
                    </td>
                    <td className="p-2">
                      <Badge className={getOrderStatusColor(order.orderStatus)}>
                        {order.orderStatus}
                      </Badge>
                    </td>
                    <td className="p-2">
                      <Badge className={getPaymentStatusColor(order.paymentStatus)}>
                        {order.paymentStatus}
                      </Badge>
                    </td>
                    <td className="p-2">
                      <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                        <Eye className="h-4 w-4" />
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      {/* New Rx Modal */}
      {showNewRxModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <Card className="w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>New Patient Rx Order</CardTitle>
                  <CardDescription>Step {newRxStep} of 3: {newRxStep === 1 ? 'Patient Search' : newRxStep === 2 ? 'Add Rx' : 'Bill/Ship Preference'}</CardDescription>
                </div>
                <Button variant="ghost" size="sm" onClick={() => setShowNewRxModal(false)}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-6">
              {newRxStep === 1 && (
                <div>
                  <h3 className="font-semibold text-lg mb-4">Step 1: Patient Search</h3>
                  <div className="space-y-4">
                    <div>
                      <Label>Search for Patient</Label>
                      <Input
                        placeholder="Enter patient name, email, or phone"
                        value={patientSearchQuery}
                        onChange={(e) => setPatientSearchQuery(e.target.value)}
                      />
                    </div>
                    {patientSearchQuery && (
                      <div className="space-y-2">
                        <h4 className="font-medium">Search Results:</h4>
                        {filteredPatients.length > 0 ? (
                          <div className="space-y-2">
                            {filteredPatients.map((patient) => (
                              <div
                                key={patient.id}
                                className="p-3 border rounded-lg cursor-pointer hover:bg-gray-50"
                                onClick={() => {
                                  setSelectedPatient(patient)
                                  setNewRxStep(2)
                                }}
                              >
                                <div className="font-medium">{patient.name}</div>
                                <div className="text-sm text-gray-500">{patient.email} • {patient.phone}</div>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <div className="text-center py-4">
                            <p className="text-gray-500">No patients found</p>
                            <Button 
                              variant="outline" 
                              className="mt-2"
                              onClick={() => setShowNewPatientForm(true)}
                            >
                              Create New Patient
                            </Button>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              )}

              {newRxStep === 2 && (
                <div>
                  <h3 className="font-semibold text-lg mb-4">Step 2: Add Rx</h3>
                  <div className="space-y-4">
                    <div className="p-4 bg-gray-50 rounded-lg">
                      <h4 className="font-medium mb-2">Selected Patient:</h4>
                      <p>{selectedPatient?.name}</p>
                      <p className="text-sm text-gray-500">{selectedPatient?.email} • {selectedPatient?.phone}</p>
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label>Medication</Label>
                        <Input placeholder="Enter medication name" />
                      </div>
                      <div>
                        <Label>Strength</Label>
                        <Input placeholder="e.g., 200mg/ml" />
                      </div>
                      <div>
                        <Label>Quantity</Label>
                        <Input placeholder="e.g., 10ml vial" />
                      </div>
                      <div>
                        <Label>Directions</Label>
                        <Input placeholder="e.g., Inject 0.5ml weekly" />
                      </div>
                    </div>
                    <div className="flex justify-end space-x-2">
                      <Button variant="outline" onClick={() => setNewRxStep(1)}>
                        Back
                      </Button>
                      <Button onClick={() => setNewRxStep(3)}>
                        Continue
                      </Button>
                    </div>
                  </div>
                </div>
              )}

              {newRxStep === 3 && (
                <div>
                  <h3 className="font-semibold text-lg mb-4">Step 3: Bill/Ship Preference</h3>
                  <div className="space-y-4">
                    <div>
                      <Label>Select Bill/Ship Preference</Label>
                      <Select value={billShipPreference} onValueChange={(value: any) => setBillShipPreference(value)}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="BF/SP">BF/SP (Bill Facility, Ship Patient)</SelectItem>
                          <SelectItem value="BF/SF">BF/SF (Bill Facility, Ship Facility)</SelectItem>
                          <SelectItem value="SF/BP">SF/BP (Ship Facility, Bill Patient)</SelectItem>
                          <SelectItem value="SF/BF">SF/BF (Ship Facility, Bill Facility)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    {billShipPreference === 'BF/SP' && (
                      <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                        <h4 className="font-medium text-yellow-800 mb-2">BF/SP Selected</h4>
                        <p className="text-sm text-yellow-700 mb-3">Choose patient type:</p>
                        <div className="space-y-2">
                          <Button 
                            variant="outline" 
                            className="w-full justify-start"
                            onClick={() => {
                              alert('Order put on hold and patient notified')
                              setShowNewRxModal(false)
                            }}
                          >
                            Existing Patient - Put on hold and notify patient
                          </Button>
                          <Button 
                            variant="outline" 
                            className="w-full justify-start"
                            onClick={() => {
                              alert('Order put on hold, welcome notification and payment outreach sent')
                              setShowNewRxModal(false)
                            }}
                          >
                            New Patient - Put on hold, welcome notify and payment outreach
                          </Button>
                        </div>
                      </div>
                    )}

                    {(billShipPreference === 'BF/SF' || billShipPreference === 'SF/BP') && (
                      <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                        <h4 className="font-medium text-blue-800 mb-2">Auto Route to Office Order Queue</h4>
                        <p className="text-sm text-blue-700 mb-3">This order will be automatically routed to the office order queue.</p>
                        <Button 
                          onClick={() => {
                            alert('Order routed to office order queue')
                            setShowNewRxModal(false)
                          }}
                        >
                          Confirm and Route
                        </Button>
                      </div>
                    )}

                    <div className="flex justify-end space-x-2">
                      <Button variant="outline" onClick={() => setNewRxStep(2)}>
                        Back
                      </Button>
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      )}

      {/* In Process Rx Component */}
      {showInProcessRx && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <Card className="w-full max-w-6xl mx-4 max-h-[90vh] overflow-y-auto">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>Patient Rx - In Process</CardTitle>
                  <CardDescription>Manage patient prescriptions by prescriber and status</CardDescription>
                </div>
                <Button variant="ghost" size="sm" onClick={() => setShowInProcessRx(false)}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Filters */}
              <div className="grid grid-cols-3 gap-4">
                <div>
                  <Label>Prescriber</Label>
                  <Select value={selectedPrescriber} onValueChange={setSelectedPrescriber}>
                    <SelectTrigger>
                      <SelectValue placeholder="All Prescribers" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="">All Prescribers</SelectItem>
                      <SelectItem value="Dr. Johnson">Dr. Johnson</SelectItem>
                      <SelectItem value="Dr. Williams">Dr. Williams</SelectItem>
                      <SelectItem value="Dr. Brown">Dr. Brown</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label>Status</Label>
                  <Select value={selectedRxStatus} onValueChange={setSelectedRxStatus}>
                    <SelectTrigger>
                      <SelectValue placeholder="All Status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Status</SelectItem>
                      <SelectItem value="waiting-input">Waiting for Input</SelectItem>
                      <SelectItem value="waiting-payment">Waiting for Payment</SelectItem>
                      <SelectItem value="missing-info">Missing Information</SelectItem>
                      <SelectItem value="pre-check">Pre-Check</SelectItem>
                      <SelectItem value="being-filled">Being Filled</SelectItem>
                      <SelectItem value="complete">Complete</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label>Date Range</Label>
                  <Select value={selectedDateRange} onValueChange={setSelectedDateRange}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="today">Today</SelectItem>
                      <SelectItem value="7days">Last 7 Days</SelectItem>
                      <SelectItem value="14days">Last 14 Days</SelectItem>
                      <SelectItem value="month">This Month</SelectItem>
                      <SelectItem value="6months">Last 6 Months</SelectItem>
                      <SelectItem value="12months">Last 12 Months</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* In Process Rx Table */}
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left p-2 font-medium">Patient</th>
                      <th className="text-left p-2 font-medium">Medication</th>
                      <th className="text-left p-2 font-medium">Prescriber</th>
                      <th className="text-left p-2 font-medium">Status</th>
                      <th className="text-left p-2 font-medium">Date</th>
                      <th className="text-left p-2 font-medium">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {inProcessRxOrders.map((rx) => (
                      <tr key={rx.id} className="border-b hover:bg-gray-50">
                        <td className="p-2">
                          <div>
                            <div className="font-medium">{rx.patientName}</div>
                            <div className="text-sm text-gray-500">{rx.patientPhone}</div>
                          </div>
                        </td>
                        <td className="p-2">
                          <div>
                            <div className="font-medium">{rx.medication}</div>
                            <div className="text-sm text-gray-500">{rx.quantity}</div>
                          </div>
                        </td>
                        <td className="p-2 text-sm">{rx.prescriber}</td>
                        <td className="p-2">
                          <Badge className={getRxStatusColor(rx.status)}>
                            {rx.status}
                          </Badge>
                        </td>
                        <td className="p-2 text-sm">{rx.date}</td>
                        <td className="p-2">
                          <div className="flex space-x-1">
                            <Button variant="ghost" size="sm" className="h-6 w-6 p-0" title="Edit">
                              <Edit className="h-3 w-3" />
                            </Button>
                            <Button variant="ghost" size="sm" className="h-6 w-6 p-0" title="Patient Updated">
                              <User className="h-3 w-3" />
                            </Button>
                            <Button variant="ghost" size="sm" className="h-6 w-6 p-0" title="Edit Rx">
                              <Pill className="h-3 w-3" />
                            </Button>
                            <Button variant="ghost" size="sm" className="h-6 w-6 p-0" title="Bill/Ship">
                              <Package className="h-3 w-3" />
                            </Button>
                            <Button variant="ghost" size="sm" className="h-6 w-6 p-0" title="Cancel & Hold">
                              <X className="h-3 w-3" />
                            </Button>
                            <Button variant="ghost" size="sm" className="h-6 w-6 p-0" title="Discontinue">
                              <AlertTriangle className="h-3 w-3" />
                            </Button>
                            <Button variant="ghost" size="sm" className="h-6 w-6 p-0" title="Future Fill">
                              <Calendar className="h-3 w-3" />
                            </Button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )

  const renderOperations = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-3xl font-bold">Operations</h2>
        <div className="flex items-center gap-4">
          <Button variant="outline" size="sm">
            <Package className="h-4 w-4 mr-2" />
            New Order
          </Button>
          <Button variant="outline" size="sm">
            Export
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Order Processing</CardTitle>
            <CardDescription>Current order status</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex justify-between">
                <span>Pending Orders</span>
                <Badge className="bg-yellow-100 text-yellow-800">12</Badge>
              </div>
              <div className="flex justify-between">
                <span>In Progress</span>
                <Badge className="bg-blue-100 text-blue-800">8</Badge>
              </div>
              <div className="flex justify-between">
                <span>Ready for Pickup</span>
                <Badge className="bg-green-100 text-green-800">15</Badge>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Inventory Alerts</CardTitle>
            <CardDescription>Items requiring attention</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm">Low Stock Items</span>
                <Badge className="bg-orange-100 text-orange-800">5</Badge>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm">Expired Items</span>
                <Badge className="bg-red-100 text-red-800">2</Badge>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm">Expiring Soon</span>
                <Badge className="bg-yellow-100 text-yellow-800">8</Badge>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Daily Summary</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-sm">Orders Processed</span>
                <span className="font-semibold">47</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm">Revenue</span>
                <span className="font-semibold">$12,450</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm">Avg Processing Time</span>
                <span className="font-semibold">2.3 hrs</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )

  const renderPrescriptions = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-3xl font-bold">Prescriptions</h2>
        <div className="flex items-center gap-4">
          <Button variant="outline" size="sm" onClick={() => setShowNewEScript(true)}>
            <Pill className="h-4 w-4 mr-2" />
            DCA Script
          </Button>
          <Button variant="outline" size="sm" onClick={() => window.open("https://surescripts.com/", "_blank")}>
            SureScripts
          </Button>
          <Button variant="outline" size="sm">
            Import
          </Button>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Filter Prescriptions</CardTitle>
          <CardDescription>Search and filter prescription records</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4">
            <div className="space-y-2">
              <Label>Status</Label>
              <Select
                value={prescriptionFilters.status}
                onValueChange={(value: string) =>
                  setPrescriptionFilters((prev: PrescriptionFilters) => ({ ...prev, status: value }))
                }
              >
                <SelectTrigger>
                  <SelectValue
                    placeholder={prescriptionFilters.status === "all" ? "All Status" : prescriptionFilters.status}
                  />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Status</SelectItem>
                  <SelectItem value="pending">Pending</SelectItem>
                  <SelectItem value="processing">Processing</SelectItem>
                  <SelectItem value="ready">Ready</SelectItem>
                  <SelectItem value="completed">Completed</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label>Search</Label>
              <Input
                placeholder="Patient name or Rx#"
                value={prescriptionFilters.search || ""}
                onChange={(e: ChangeEvent<HTMLInputElement>) =>
                  setPrescriptionFilters((prev: PrescriptionFilters) => ({ ...prev, search: e.target.value }))
                }
              />
            </div>
            <div className="space-y-2">
              <Label>Prescriber</Label>
              <Input
                placeholder="Doctor name"
                value={prescriptionFilters.prescriber || ""}
                onChange={(e: ChangeEvent<HTMLInputElement>) =>
                  setPrescriptionFilters((prev: PrescriptionFilters) => ({
                    ...prev,
                    prescriber: e.target.value,
                  }))
                }
              />
            </div>
            <div className="space-y-2">
              <Label>Date From</Label>
              <Input
                type="date"
                value={prescriptionFilters.dateFrom || ""}
                onChange={(e: ChangeEvent<HTMLInputElement>) =>
                  setPrescriptionFilters((prev: PrescriptionFilters) => ({ ...prev, dateFrom: e.target.value }))
                }
              />
            </div>
            <div className="space-y-2">
              <Label>Date To</Label>
              <Input
                type="date"
                value={prescriptionFilters.dateTo || ""}
                onChange={(e: ChangeEvent<HTMLInputElement>) =>
                  setPrescriptionFilters((prev: PrescriptionFilters) => ({ ...prev, dateTo: e.target.value }))
                }
              />
            </div>
            <div className="space-y-2">
              <Label>&nbsp;</Label>
              <Button className="w-full bg-red-800 hover:bg-red-900">Search</Button>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Recent Prescriptions</CardTitle>
          <CardDescription>Latest prescription activity</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {[
              {
                rx: "RX001234",
                patient: "John Smith",
                medication: "Testosterone 200mg/ml",
                prescriber: "Dr. Johnson",
                date: "12/18/2024",
                status: "Ready",
                strength: "200mg/ml",
                quantity: "10ml vial",
                directions: "Inject 0.5ml intramuscularly once weekly",
                refills: "5",
                daw: false,
                priority: "Routine",
                notes: "Patient prefers morning injections",
              },
              {
                rx: "RX001235",
                patient: "Sarah Wilson",
                medication: "Estradiol Cream 0.1%",
                prescriber: "Dr. Brown",
                date: "12/18/2024",
                status: "Processing",
                strength: "0.1%",
                quantity: "30g tube",
                directions: "Apply thin layer to affected area twice daily",
                refills: "3",
                daw: true,
                priority: "Routine",
                notes: "Patient has sensitive skin",
              },
              {
                rx: "RX001236",
                patient: "Mike Davis",
                medication: "Thyroid T3/T4 Compound",
                prescriber: "Dr. Smith",
                date: "12/17/2024",
                status: "Completed",
                strength: "T3 25mcg/T4 100mcg",
                quantity: "90 capsules",
                directions: "Take 1 capsule by mouth once daily on empty stomach",
                refills: "2",
                daw: false,
                priority: "Urgent",
                notes: "Take 1 hour before breakfast",
              },
              {
                rx: "RX001237",
                patient: "Lisa Johnson",
                medication: "Pain Relief Gel",
                prescriber: "Dr. Wilson",
                date: "12/17/2024",
                status: "Pending",
                strength: "Custom compound",
                quantity: "60g tube",
                directions: "Apply to affected area 3-4 times daily as needed",
                refills: "1",
                daw: false,
                priority: "Routine",
                notes: "For chronic knee pain",
              },
            ].map((prescription, index) => (
              <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                <div className="grid grid-cols-4 gap-4 flex-1">
                  <div>
                    <p className="font-medium">{prescription.rx}</p>
                    <p className="text-sm text-gray-500">{prescription.patient}</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium">{prescription.medication}</p>
                    <p className="text-xs text-gray-400">{prescription.prescriber}</p>
                  </div>
                  <div>
                    <p className="text-sm">{prescription.date}</p>
                  </div>
                  <div>
                    <Badge className={getStatusColor(prescription.status)}>{prescription.status}</Badge>
                  </div>
                </div>
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleShowPrescriptionDetails(prescription as Prescription)}
                  >
                    View Details
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleShowPrescriptionPatients(prescription as Prescription)}
                  >
                    Patients
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Prescription Details Modal */}
      {showPrescriptionDetails && selectedPrescription && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <Card className="w-full max-w-full sm:max-w-4xl mx-4 max-h-[90vh] overflow-y-auto">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>Prescription Details - {selectedPrescription.rx}</CardTitle>
                  <CardDescription>Complete prescription information</CardDescription>
                </div>
                <Button variant="ghost" size="sm" onClick={() => setShowPrescriptionDetails(false)}>
                  ✕
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Patient Information */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Patient Information</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div>
                      <Label className="font-medium">Patient Name</Label>
                      <p className="text-sm">{selectedPrescription.patient}</p>
                    </div>
                    <div>
                      <Label className="font-medium">Prescription Number</Label>
                      <p className="text-sm">{selectedPrescription.rx}</p>
                    </div>
                    <div>
                      <Label className="font-medium">Date Prescribed</Label>
                      <p className="text-sm">{selectedPrescription.date}</p>
                    </div>
                    <div>
                      <Label className="font-medium">Status</Label>
                      <Badge className={getStatusColor(selectedPrescription.status)}>
                        {selectedPrescription.status}
                      </Badge>
                    </div>
                  </CardContent>
                </Card>

                {/* Prescriber Information */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Prescriber Information</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div>
                      <Label className="font-medium">Prescriber</Label>
                      <p className="text-sm">{selectedPrescription.prescriber}</p>
                    </div>
                    <div>
                      <Label className="font-medium">Priority</Label>
                      <p className="text-sm">{selectedPrescription.priority}</p>
                    </div>
                    <div>
                      <Label className="font-medium">DAW (Dispense as Written)</Label>
                      <p className="text-sm">{selectedPrescription.daw ? "Yes" : "No"}</p>
                    </div>
                  </CardContent>
                </Card>

                {/* Medication Details */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Medication Details</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div>
                      <Label className="font-medium">Medication</Label>
                      <p className="text-sm">{selectedPrescription.medication}</p>
                    </div>
                    <div>
                      <Label className="font-medium">Strength</Label>
                      <p className="text-sm">{selectedPrescription.strength}</p>
                    </div>
                    <div>
                      <Label className="font-medium">Quantity</Label>
                      <p className="text-sm">{selectedPrescription.quantity}</p>
                    </div>
                    <div>
                      <Label className="font-medium">Refills Remaining</Label>
                      <p className="text-sm">{selectedPrescription.refills}</p>
                    </div>
                  </CardContent>
                </Card>

                {/* Directions & Notes */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Directions & Notes</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div>
                      <Label className="font-medium">Directions for Use</Label>
                      <p className="text-sm">{selectedPrescription.directions}</p>
                    </div>
                    <div>
                      <Label className="font-medium">Special Notes</Label>
                      <p className="text-sm">{selectedPrescription.notes}</p>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Action Buttons */}
              <div className="flex justify-end gap-4 pt-4 border-t">
                <Button variant="outline">Print Prescription</Button>
                <Button variant="outline">Edit Prescription</Button>
                <Button className="bg-red-800 hover:bg-red-900">Process Order</Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Prescription Patients Modal */}
      {showPrescriptionPatients && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <Card className="w-full max-w-full sm:max-w-4xl mx-4 max-h-[90vh] overflow-y-auto">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>Patients Prescribed This Medication</CardTitle>
                  <CardDescription>
                    Patients who have been prescribed {selectedPrescription?.medication}
                  </CardDescription>
                </div>
                <Button variant="ghost" size="sm" onClick={() => setShowPrescriptionPatients(false)}>
                  ✕
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {prescriptionPatients.map((patient, index) => (
                  <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="grid grid-cols-5 gap-4 flex-1">
                      <div>
                        <p className="font-medium">{patient.name}</p>
                        <p className="text-sm text-gray-500">{patient.email}</p>
                      </div>
                      <div>
                        <p className="text-sm">{patient.phone}</p>
                      </div>
                      <div>
                        <p className="text-sm">Prescribed: {patient.prescribedDate}</p>
                      </div>
                      <div>
                        <p className="text-sm">{patient.dosage}</p>
                        <p className="text-xs text-gray-400">{patient.frequency}</p>
                      </div>
                      <div>
                        <Badge
                          className={
                            patient.status === "Active" ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800"
                          }
                        >
                          {patient.status}
                        </Badge>
                      </div>
                    </div>
                    <Button variant="outline" size="sm">
                      View Patient
                    </Button>
                  </div>
                ))}
              </div>

              <div className="flex justify-end gap-4 mt-6 pt-4 border-t">
                <Button variant="outline">Export List</Button>
                <Button className="bg-red-800 hover:bg-red-900" onClick={() => setShowAddPatientToPrescription(true)}>
                  Add New Patient
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Add Patient to Prescription Modal */}
      {showAddPatientToPrescription && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <Card className="w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>Add Patient to Prescription</CardTitle>
                  <CardDescription>
                    Search and select a patient to add to {selectedPrescription?.medication}
                  </CardDescription>
                </div>
                <Button variant="ghost" size="sm" onClick={() => setShowAddPatientToPrescription(false)}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label>Search Patients</Label>
                <Input
                  placeholder="Search by name, email, or phone..."
                  value={patientSearchQuery}
                  onChange={(e: ChangeEvent<HTMLInputElement>) => setPatientSearchQuery(e.target.value)}
                  className="w-full"
                />
              </div>

              {filteredPatients.length > 0 && (
                <div className="space-y-2 max-h-60 overflow-y-auto border rounded-md p-2">
                  {filteredPatients.map((patient) => (
                    <div
                      key={patient.id}
                      className="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50 cursor-pointer"
                      onClick={() => handleAddPatientToPrescription(patient)}
                    >
                      <div>
                        <p className="font-medium">{patient.name}</p>
                        <p className="text-sm text-gray-500">{patient.email}</p>
                        <p className="text-sm text-gray-500">{patient.phone}</p>
                      </div>
                      <div className="text-right">
                        <Badge
                          className={
                            patient.status === "Active" ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800"
                          }
                        >
                          {patient.status}
                        </Badge>
                        <p className="text-xs text-gray-400 mt-1">Last visit: {patient.lastVisit}</p>
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {patientSearchQuery && filteredPatients.length === 0 && (
                <div className="text-center py-8 text-gray-500">
                  <p>No patients found matching "{patientSearchQuery}"</p>
                  <Button variant="outline" className="mt-2" onClick={() => setShowNewPatient(true)}>
                    <Plus className="h-4 w-4 mr-2" />
                    Create New Patient
                  </Button>
                </div>
              )}

              {!patientSearchQuery && (
                <div className="text-center py-8 text-gray-500">
                  <p>Start typing to search for patients</p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )

  const renderPatients = () => {
    const patients = allPatients

    const handlePatientSelect = (patientId: number, isSelected: boolean) => {
      if (isSelected) {
        setSelectedPatients((prev: number[]) => [...prev, patientId])
      } else {
        setSelectedPatients((prev: number[]) => prev.filter((id) => id !== patientId))
      }
    }

    const handleSelectAllPatients = (isSelected: boolean) => {
      if (isSelected) {
        const allPatientIds = patients.map((patient) => patient.id)
        setSelectedPatients(allPatientIds)
      } else {
        setSelectedPatients([])
      }
    }

    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h2 className="text-3xl font-bold">Patients</h2>
          <div className="flex items-center gap-4">
            {selectedPatients.length > 0 && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowBulkMedication(true)}
                className="bg-blue-50 text-blue-700 border-blue-200"
              >
                <Pill className="h-4 w-4 mr-2" />
                Assign Medication ({selectedPatients.length})
              </Button>
            )}
            <Button variant="outline" size="sm" onClick={() => setShowNewPatient(true)}>
              <Users className="h-4 w-4 mr-2" />
              Add Patient
            </Button>
            <Button variant="outline" size="sm">
              Import Patients
            </Button>
          </div>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Patient Search</CardTitle>
            <CardDescription>Find and manage patient records</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex gap-4">
              <div className="flex-1">
                <Input placeholder="Search by name, email, or phone..." className="w-full" />
              </div>
              <Button className="bg-red-800 hover:bg-red-900">
                <Search className="h-4 w-4 mr-2" />
                Search
              </Button>
            </div>
          </CardContent>
        </Card>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>Patient Statistics</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex justify-between">
                  <span>Total Patients</span>
                  <span className="font-semibold">{patients.length}</span>
                </div>
                <div className="flex justify-between">
                  <span>Active This Month</span>
                  <span className="font-semibold">342</span>
                </div>
                <div className="flex justify-between">
                  <span>New This Week</span>
                  <span className="font-semibold">18</span>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Recent Activity</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="text-sm">
                  <p className="font-medium">John Smith</p>
                  <p className="text-gray-500">Updated profile - 2 min ago</p>
                </div>
                <div className="text-sm">
                  <p className="font-medium">Sarah Johnson</p>
                  <p className="text-gray-500">New prescription - 15 min ago</p>
                </div>
                <div className="text-sm">
                  <p className="font-medium">Mike Davis</p>
                  <p className="text-gray-500">Payment processed - 1 hour ago</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Quick Actions</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <Button variant="outline" className="w-full justify-start">
                  <Users className="h-4 w-4 mr-2" />
                  Bulk Import
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <Search className="h-4 w-4 mr-2" />
                  Advanced Search
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <Package className="h-4 w-4 mr-2" />
                  Export Data
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Bulk Actions Section */}
        {selectedPatients.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle>Bulk Actions ({selectedPatients.length} patients selected)</CardTitle>
              <CardDescription>Perform actions on selected patients</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-3">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowBulkMedication(true)}
                  className="bg-blue-50 text-blue-700 border-blue-200"
                >
                  <Pill className="h-4 w-4 mr-2" />
                  Add Prescription
                </Button>
                <Button variant="outline" size="sm">
                  <Users className="h-4 w-4 mr-2" />
                  Update Contact Info
                </Button>
                <Button variant="outline" size="sm">
                  <CreditCard className="h-4 w-4 mr-2" />
                  Update Payment Method
                </Button>
                <Button variant="outline" size="sm">
                  <Package className="h-4 w-4 mr-2" />
                  Export Selected
                </Button>
                <Button variant="outline" size="sm">
                  <AlertCircle className="h-4 w-4 mr-2" />
                  Send Notification
                </Button>
                <Button variant="outline" size="sm">
                  <Calendar className="h-4 w-4 mr-2" />
                  Schedule Appointment
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setSelectedPatients([])}
                  className="ml-auto text-gray-600"
                >
                  Clear Selection
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>Patient List</CardTitle>
                <CardDescription>Recently added or updated patient records</CardDescription>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b">
                    <th className="text-left p-3">
                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          id="selectAll"
                          checked={selectedPatients.length === patients.length && patients.length > 0}
                          onChange={(e: ChangeEvent<HTMLInputElement>) => handleSelectAllPatients(e.target.checked)}
                          className="rounded border-gray-300"
                        />
                        <span className="text-sm font-medium">Select All</span>
                      </div>
                    </th>
                    <th className="text-left p-3 font-medium">Patient Name</th>
                    <th className="text-left p-3 font-medium">Phone</th>
                    <th className="text-left p-3 font-medium">Last Visit</th>
                    <th className="text-left p-3 font-medium">Status</th>
                    <th className="text-left p-3 font-medium">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {patients.map((patient, index) => (
                    <tr key={index} className="border-b hover:bg-gray-50">
                      <td className="p-3">
                        <input
                          type="checkbox"
                          id={`patient-${patient.id}`}
                          checked={selectedPatients.includes(patient.id)}
                          onChange={() => {
                            const isChecked = !selectedPatients.includes(patient.id)
                            handlePatientSelect(patient.id, isChecked)
                          }}
                          className="rounded border-gray-300"
                        />
                      </td>
                      <td className="p-3">
                        <div>
                          <p className="font-medium">{patient.name}</p>
                          <p className="text-sm text-gray-500">{patient.email}</p>
                        </div>
                      </td>
                      <td className="p-3">
                        <p className="text-sm">{patient.phone}</p>
                      </td>
                      <td className="p-3">
                        <p className="text-sm">{patient.lastVisit}</p>
                      </td>
                      <td className="p-3">
                        <Badge
                          className={
                            patient.status === "Active" ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800"
                          }
                        >
                          {patient.status}
                        </Badge>
                      </td>
                      <td className="p-3">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            setSelectedPatientId(patient.id)
                            setShowPatientDetails(true)
                          }}
                        >
                          View Profile
                        </Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </CardContent>
        </Card>

        {/* Bulk Medication Assignment Modal */}
        {showBulkMedication && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <Card className="w-full max-w-2xl mx-4">
              <CardHeader>
                <CardTitle>Assign Medication to Selected Patients</CardTitle>
                <CardDescription>Assigning medication to {selectedPatients.length} selected patient(s)</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>Medication</Label>
                    <Input
                      placeholder="Enter medication name"
                      value={bulkMedicationData.medication}
                      onChange={(e: ChangeEvent<HTMLInputElement>) =>
                        setBulkMedicationData((prev: BulkMedicationData) => ({ ...prev, medication: e.target.value }))
                      }
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>Dosage</Label>
                    <Input
                      placeholder="e.g., 10mg"
                      value={bulkMedicationData.dosage}
                      onChange={(e: ChangeEvent<HTMLInputElement>) =>
                        setBulkMedicationData((prev: BulkMedicationData) => ({ ...prev, dosage: e.target.value }))
                      }
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>Frequency</Label>
                    <Select
                      value={bulkMedicationData.frequency}
                      onValueChange={(value: string) =>
                        setBulkMedicationData((prev: BulkMedicationData) => ({ ...prev, frequency: value }))
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select frequency" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="once-daily">Once Daily</SelectItem>
                        <SelectItem value="twice-daily">Twice Daily</SelectItem>
                        <SelectItem value="three-times-daily">Three Times Daily</SelectItem>
                        <SelectItem value="four-times-daily">Four Times Daily</SelectItem>
                        <SelectItem value="as-needed">As Needed</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label>Duration</Label>
                    <Input
                      placeholder="e.g., 30 days"
                      value={bulkMedicationData.duration}
                      onChange={(e: ChangeEvent<HTMLInputElement>) =>
                        setBulkMedicationData((prev: BulkMedicationData) => ({ ...prev, duration: e.target.value }))
                      }
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>Prescriber</Label>
                    <Input
                      placeholder="Doctor name"
                      value={bulkMedicationData.prescriber}
                      onChange={(e: ChangeEvent<HTMLInputElement>) =>
                        setBulkMedicationData((prev: BulkMedicationData) => ({ ...prev, prescriber: e.target.value }))
                      }
                    />
                  </div>
                </div>
                <div className="space-y-2">
                  <Label>Instructions</Label>
                  <textarea
                    placeholder="Special instructions for patients..."
                    value={bulkMedicationData.instructions}
                    onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>
                      setBulkMedicationData((prev: BulkMedicationData) => ({ ...prev, instructions: e.target.value }))
                    }
                    className="w-full min-h-[80px] p-3 border border-gray-300 rounded-md resize-vertical"
                  />
                </div>
              </CardContent>
              <div className="flex justify-end gap-4 p-6 border-t">
                <Button variant="outline" onClick={() => setShowBulkMedication(false)}>
                  Cancel
                </Button>
                <Button
                  className="bg-red-800 hover:bg-red-900"
                  onClick={() => {
                    // Handle bulk medication assignment
                    console.log("Assigning medication to patients:", selectedPatients, bulkMedicationData)
                    setShowBulkMedication(false)
                    setSelectedPatients([])
                    setBulkMedicationData({
                      medication: "",
                      dosage: "",
                      frequency: "",
                      duration: "",
                      instructions: "",
                      prescriber: "",
                    })
                  }}
                >
                  Assign Medication
                </Button>
              </div>
            </Card>
          </div>
        )}

        {/* Patient Details Modal */}
        {showPatientDetails && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <Card className="w-full max-w-full sm:max-w-6xl mx-4 max-h-[90vh] overflow-y-auto">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>Patient Profile</CardTitle>
                    <CardDescription>Complete patient information and history</CardDescription>
                  </div>
                  <Button variant="ghost" size="sm" onClick={() => setShowPatientDetails(false)}>
                    ✕
                  </Button>
                </div>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Tab Navigation and Content - Side by Side */}
                <div className="flex gap-6">
                  {/* Left Sidebar with Tabs */}
                  <div className="w-48 space-y-2">
                    <button
                      onClick={() => setActivePatientTab("contact")}
                      className={`w-full text-left px-4 py-3 rounded-lg font-medium transition-colors ${
                        activePatientTab === "contact"
                          ? "bg-red-800 text-white"
                          : "bg-white text-gray-700 hover:bg-gray-50 border"
                      }`}
                    >
                      Contact Info
                    </button>
                    <button
                      onClick={() => setActivePatientTab("medical")}
                      className={`w-full text-left px-4 py-3 rounded-lg font-medium transition-colors ${
                        activePatientTab === "medical"
                          ? "bg-red-800 text-white"
                          : "bg-white text-gray-700 hover:bg-gray-50 border"
                      }`}
                    >
                      Medical History
                    </button>
                    <button
                      onClick={() => setActivePatientTab("prescriptions")}
                      className={`w-full text-left px-4 py-3 rounded-lg font-medium transition-colors ${
                        activePatientTab === "prescriptions"
                          ? "bg-red-800 text-white"
                          : "bg-white text-gray-700 hover:bg-gray-50 border"
                      }`}
                    >
                      Prescriptions
                    </button>
                    <button
                      onClick={() => setActivePatientTab("billing")}
                      className={`w-full text-left px-4 py-3 rounded-lg font-medium transition-colors ${
                        activePatientTab === "billing"
                          ? "bg-red-800 text-white"
                          : "bg-white text-gray-700 hover:bg-gray-50 border"
                      }`}
                    >
                      Billing
                    </button>
                  </div>

                  {/* Main Content Area */}
                  <div className="flex-1">
                    {/* Tab Content */}
                    {activePatientTab === "contact" && (
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <Card>
                          <CardHeader>
                            <CardTitle className="text-lg">Personal Information</CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-3">
                            <div>
                              <Label className="font-medium">Full Name</Label>
                              <p className="text-sm">
                                {allPatients.find((p) => p.id === selectedPatientId)?.name || "John Smith"}
                              </p>
                            </div>
                            <div>
                              <Label className="font-medium">Date of Birth</Label>
                              <p className="text-sm">March 15, 1985</p>
                            </div>
                            <div>
                              <Label className="font-medium">Gender</Label>
                              <p className="text-sm">Male</p>
                            </div>
                            <div>
                              <Label className="font-medium">Phone</Label>
                              <p className="text-sm">
                                {allPatients.find((p) => p.id === selectedPatientId)?.phone || "(555) 123-4567"}
                              </p>
                            </div>
                            <div>
                              <Label className="font-medium">Email</Label>
                              <p className="text-sm">
                                {allPatients.find((p) => p.id === selectedPatientId)?.email || "john.smith@email.com"}
                              </p>
                            </div>
                          </CardContent>
                        </Card>

                        <Card>
                          <CardHeader>
                            <CardTitle className="text-lg">Address Information</CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-3">
                            <div>
                              <Label className="font-medium">Street Address</Label>
                              <p className="text-sm">123 Main Street</p>
                            </div>
                            <div>
                              <Label className="font-medium">City, State ZIP</Label>
                              <p className="text-sm">Chicago, IL 60601</p>
                            </div>
                            <div>
                              <Label className="font-medium">Emergency Contact</Label>
                              <p className="text-sm">Jane Smith - (555) 987-6543</p>
                            </div>
                            <div>
                              <Label className="font-medium">Relationship</Label>
                              <p className="text-sm">Spouse</p>
                            </div>
                          </CardContent>
                        </Card>
                      </div>
                    )}

                    {activePatientTab === "medical" && (
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <Card>
                          <CardHeader>
                            <CardTitle className="text-lg">Medical History</CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-3">
                            <div>
                              <Label className="font-medium">Allergies</Label>
                              <p className="text-sm">Penicillin, Shellfish</p>
                            </div>
                            <div>
                              <Label className="font-medium">Medical Conditions</Label>
                              <p className="text-sm">Hypertension, Diabetes</p>
                            </div>
                            <div>
                              <Label className="font-medium">Current Medications</Label>
                              <p className="text-sm">Lisinopril, Metformin</p>
                            </div>
                          </CardContent>
                        </Card>

                        <Card>
                          <CardHeader>
                            <CardTitle className="text-lg">Other Information</CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-3">
                            <div>
                              <Label className="font-medium">Insurance Provider</Label>
                              <p className="text-sm">Blue Cross Blue Shield</p>
                            </div>
                            <div>
                              <Label className="font-medium">Policy Number</Label>
                              <p className="text-sm">1234567890</p>
                            </div>
                            <div>
                              <Label className="font-medium">Preferred Pharmacy</Label>
                              <p className="text-sm">Main Street Pharmacy</p>
                            </div>
                          </CardContent>
                        </Card>
                      </div>
                    )}

                    {activePatientTab === "prescriptions" && (
                      <Card>
                        <CardHeader>
                          <CardTitle className="text-lg">Prescription History</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-3">
                          {[
                            {
                              rx: "RX001234",
                              medication: "Testosterone 200mg/ml",
                              prescriber: "Dr. Johnson",
                              date: "12/18/2024",
                              status: "Ready",
                            },
                            {
                              rx: "RX001235",
                              medication: "Estradiol Cream 0.1%",
                              prescriber: "Dr. Brown",
                              date: "12/18/2024",
                              status: "Processing",
                            },
                            {
                              rx: "RX001236",
                              medication: "Thyroid T3/T4 Compound",
                              prescriber: "Dr. Smith",
                              date: "12/17/2024",
                              status: "Completed",
                            },
                          ].map((prescription, index) => (
                            <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                              <div className="grid grid-cols-3 gap-4 flex-1">
                                <div>
                                  <p className="font-medium">{prescription.rx}</p>
                                </div>
                                <div>
                                  <p className="text-sm font-medium">{prescription.medication}</p>
                                  <p className="text-xs text-gray-400">{prescription.prescriber}</p>
                                </div>
                                <div>
                                  <p className="text-sm">{prescription.date}</p>
                                </div>
                              </div>
                              <Badge className={getStatusColor(prescription.status)}>{prescription.status}</Badge>
                            </div>
                          ))}
                        </CardContent>
                      </Card>
                    )}

                    {activePatientTab === "billing" && (
                      <Card>
                        <CardHeader>
                          <CardTitle className="text-lg">Billing Information</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-3">
                          <div>
                            <Label className="font-medium">Outstanding Balance</Label>
                            <p className="text-sm">$50.00</p>
                          </div>
                          <div>
                            <Label className="font-medium">Last Payment Date</Label>
                            <p className="text-sm">12/01/2024</p>
                          </div>
                          <div>
                            <Label className="font-medium">Payment Method</Label>
                            <p className="text-sm">Credit Card</p>
                          </div>
                        </CardContent>
                      </Card>
                    )}
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="flex justify-end gap-4 pt-4 border-t">
                  <Button variant="outline">Edit Patient</Button>
                  <Button className="bg-red-800 hover:bg-red-900">Save Changes</Button>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  )

  const renderAccount = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-3xl font-bold">Account</h2>
        <div className="flex items-center gap-4">
          <Button variant="outline" size="sm">
            <CreditCard className="h-4 w-4 mr-2" />
            Update Payment
          </Button>
          <Button variant="outline" size="sm">
            Export
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Billing Information</CardTitle>
            <CardDescription>Manage your billing details and subscription</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex justify-between">
                <span>Current Plan</span>
                <span className="font-semibold">Premium</span>
              </div>
              <div className="flex justify-between">
                <span>Next Payment</span>
                <span className="font-semibold">01/15/2025</span>
              </div>
              <div className="flex justify-between">
                <span>Amount Due</span>
                <span className="font-semibold">$99.99</span>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Profile Settings</CardTitle>
            <CardDescription>Update your profile information</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex justify-between">
                <span>Name</span>
                <span className="font-semibold">Amanda Rodriguez</span>
              </div>
              <div className="flex justify-between">
                <span>Email</span>
                <span className="font-semibold">amanda.rodriguez@email.com</span>
              </div>
              <div className="flex justify-between">
                <span>Password</span>
                <span className="font-semibold">********</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )

  const renderAR = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-3xl font-bold">A/R</h2>
        <div className="flex items-center gap-4">
          <Button variant="outline" size="sm">
            Export
          </Button>
        </div>
      </div>

      {/* Tab Navigation at the top */}
      <div className="flex gap-2 border-b">
        <button
          onClick={() => setActiveARTab("search")}
          className={`px-6 py-3 font-medium transition-colors ${
            activeARTab === "search"
              ? "bg-red-800 text-white rounded-t-lg"
              : "text-gray-700 hover:text-gray-900 hover:bg-gray-50"
          }`}
        >
          <Search className="h-4 w-4 inline mr-2" />
          Search
        </button>
        <button
          onClick={() => setActiveARTab("statements")}
          className={`px-6 py-3 font-medium transition-colors ${
            activeARTab === "statements"
              ? "bg-red-800 text-white rounded-t-lg"
              : "text-gray-700 hover:text-gray-900 hover:bg-gray-50"
          }`}
        >
          <Package className="h-4 w-4 inline mr-2" />
          Statements
        </button>
        <button
          onClick={() => setActiveARTab("transactions")}
          className={`px-6 py-3 font-medium transition-colors ${
            activeARTab === "transactions"
              ? "bg-red-800 text-white rounded-t-lg"
              : "text-gray-700 hover:text-gray-900 hover:bg-gray-50"
          }`}
        >
          <CreditCard className="h-4 w-4 inline mr-2" />
          Transactions
        </button>
      </div>

      {/* Main Content Area */}
      <div>
        {activeARTab === "search" && (
          <Card>
            <CardHeader>
              <CardTitle>Quick Search</CardTitle>
              <CardDescription>Find patient accounts quickly</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex gap-4">
                <div className="flex-1">
                  <Input
                    placeholder="Search by name, email, or phone..."
                    className="w-full"
                    value={arSearchQuery}
                    onChange={(e: ChangeEvent<HTMLInputElement>) => setArSearchQuery(e.target.value)}
                  />
                </div>
                <Button className="bg-red-800 hover:bg-red-900">
                  <Search className="h-4 w-4 mr-2" />
                  Search
                </Button>
              </div>
              <div className="mt-4">
                <h3 className="text-lg font-medium">Recent Searches</h3>
                <div className="flex flex-wrap gap-2 mt-2">
                  {recentSearches.map((search, index) => (
                    <Badge key={index} variant="secondary" className="cursor-pointer hover:bg-gray-200">
                      {search}
                    </Badge>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {activeARTab === "statements" && (
          <Card>
            <CardHeader>
              <CardTitle>Patient Statements</CardTitle>
              <CardDescription>Generate and manage patient billing statements</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label>Statement Date</Label>
                    <Input type="date" />
                  </div>
                  <div className="space-y-2">
                    <Label>Patient</Label>
                    <Input placeholder="Search patient..." />
                  </div>
                  <div className="space-y-2">
                    <Label>Status</Label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="All statuses" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Statuses</SelectItem>
                        <SelectItem value="pending">Pending</SelectItem>
                        <SelectItem value="sent">Sent</SelectItem>
                        <SelectItem value="paid">Paid</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <Button className="bg-red-800 hover:bg-red-900">Generate Statements</Button>
              </div>
            </CardContent>
          </Card>
        )}

        {activeARTab === "transactions" && (
          <Card>
            <CardHeader>
              <CardTitle>Transaction Search</CardTitle>
              <CardDescription>Search and filter transaction records</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  <div className="space-y-2">
                    <Label>Activity</Label>
                    <Select
                      value={transactionFilters.activity}
                      onValueChange={(value: string) =>
                        setTransactionFilters((prev: TransactionFilters) => ({ ...prev, activity: value }))
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="All Activities" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Activities</SelectItem>
                        <SelectItem value="payment">Payment</SelectItem>
                        <SelectItem value="charge">Charge</SelectItem>
                        <SelectItem value="adjustment">Adjustment</SelectItem>
                        <SelectItem value="refund">Refund</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label>Date From</Label>
                    <Input
                      type="date"
                      value={transactionFilters.dateFrom}
                      onChange={(e: ChangeEvent<HTMLInputElement>) =>
                        setTransactionFilters((prev: TransactionFilters) => ({ ...prev, dateFrom: e.target.value }))
                      }
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>Date To</Label>
                    <Input
                      type="date"
                      value={transactionFilters.dateTo}
                      onChange={(e: ChangeEvent<HTMLInputElement>) =>
                        setTransactionFilters((prev: TransactionFilters) => ({ ...prev, dateTo: e.target.value }))
                      }
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>Patient</Label>
                    <Input
                      placeholder="Patient name"
                      value={transactionFilters.patient}
                      onChange={(e: ChangeEvent<HTMLInputElement>) =>
                        setTransactionFilters((prev: TransactionFilters) => ({ ...prev, patient: e.target.value }))
                      }
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>Rx Number</Label>
                    <Input
                      placeholder="Prescription number"
                      value={transactionFilters.rxNumber}
                      onChange={(e: ChangeEvent<HTMLInputElement>) =>
                        setTransactionFilters((prev: TransactionFilters) => ({ ...prev, rxNumber: e.target.value }))
                      }
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>Transaction Type</Label>
                    <Select
                      value={transactionFilters.transactionType}
                      onValueChange={(value: string) =>
                        setTransactionFilters((prev: TransactionFilters) => ({ ...prev, transactionType: value }))
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="All types" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Types</SelectItem>
                        <SelectItem value="credit">Credit</SelectItem>
                        <SelectItem value="debit">Debit</SelectItem>
                        <SelectItem value="ach">ACH</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label>Payment Type</Label>
                    <Select
                      value={transactionFilters.paymentType}
                      onValueChange={(value: string) =>
                        setTransactionFilters((prev: TransactionFilters) => ({ ...prev, paymentType: value }))
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="All types" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Types</SelectItem>
                        <SelectItem value="visa">Visa</SelectItem>
                        <SelectItem value="mastercard">Mastercard</SelectItem>
                        <SelectItem value="amex">Amex</SelectItem>
                        <SelectItem value="ach">ACH</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label>Payment Ref</Label>
                    <Input
                      placeholder="Reference number"
                      value={transactionFilters.paymentRef}
                      onChange={(e: ChangeEvent<HTMLInputElement>) =>
                        setTransactionFilters((prev: TransactionFilters) => ({ ...prev, paymentRef: e.target.value }))
                      }
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>Amount</Label>
                    <Input
                      placeholder="Enter amount"
                      value={transactionFilters.amount}
                      onChange={(e: ChangeEvent<HTMLInputElement>) =>
                        setTransactionFilters((prev: TransactionFilters) => ({ ...prev, amount: e.target.value }))
                      }
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>Origin</Label>
                    <Select
                      value={transactionFilters.transactionOrigin}
                      onValueChange={(value: string) =>
                        setTransactionFilters((prev: TransactionFilters) => ({ ...prev, transactionOrigin: value }))
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="All origins" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Origins</SelectItem>
                        <SelectItem value="online">Online</SelectItem>
                        <SelectItem value="in-store">In-Store</SelectItem>
                        <SelectItem value="phone">Phone</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label>Origin Ref</Label>
                    <Input
                      placeholder="Origin reference"
                      value={transactionFilters.originReference}
                      onChange={(e: ChangeEvent<HTMLInputElement>) =>
                        setTransactionFilters((prev: TransactionFilters) => ({ ...prev, originReference: e.target.value }))
                      }
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>Prescriber Group</Label>
                    <Select
                      value={transactionFilters.prescriberGroup}
                      onValueChange={(value: string) =>
                        setTransactionFilters((prev: TransactionFilters) => ({ ...prev, prescriberGroup: value }))
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="All groups" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Groups</SelectItem>
                        <SelectItem value="group1">Group 1</SelectItem>
                        <SelectItem value="group2">Group 2</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label>Priority</Label>
                    <Select
                      value={transactionFilters.priority}
                      onValueChange={(value: string) =>
                        setTransactionFilters((prev: TransactionFilters) => ({ ...prev, priority: value }))
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="All priorities" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Priorities</SelectItem>
                        <SelectItem value="urgent">Urgent</SelectItem>
                        <SelectItem value="routine">Routine</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <Button className="w-full bg-red-800 hover:bg-red-900" onClick={handleTransactionSearch}>
                  Search
                </Button>
              </div>

              {showResults && (
                <div className="mt-6">
                  <h3 className="text-lg font-medium">Search Results</h3>
                  <div className="overflow-x-auto mt-2">
                    <table className="w-full">
                      <thead>
                        <tr className="border-b">
                          <th className="text-left p-3 font-medium">Date</th>
                          <th className="text-left p-3 font-medium">Patient</th>
                          <th className="text-left p-3 font-medium">Type</th>
                          <th className="text-left p-3 font-medium">Amount</th>
                          <th className="text-left p-3 font-medium">Status</th>
                          <th className="text-left p-3 font-medium">Rx #</th>
                          <th className="text-left p-3 font-medium">Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        {transactionResults.map((transaction, index) => (
                          <tr key={index} className="border-b hover:bg-gray-50">
                            <td className="p-3">{transaction.date}</td>
                            <td className="p-3">{transaction.patient}</td>
                            <td className="p-3">{transaction.type}</td>
                            <td className="p-3">{transaction.amount}</td>
                            <td className="p-3">
                              <Badge
                                className={
                                  transaction.status === "Completed"
                                    ? "bg-green-100 text-green-800"
                                    : "bg-yellow-100 text-yellow-800"
                                }
                              >
                                {transaction.status}
                              </Badge>
                            </td>
                            <td className="p-3">{transaction.rxNumber}</td>
                            <td className="p-3">
                              <Button variant="outline" size="sm">
                                View Details
                              </Button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )

  const renderWorkflow = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-3xl font-bold">Workflow</h2>
        <div className="flex items-center gap-4">
          <Button variant="outline" size="sm">
            <Workflow className="h-4 w-4 mr-2" />
            New Workflow
          </Button>
          <Button variant="outline" size="sm">
            Export
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>To Do</CardTitle>
            <CardDescription>Tasks to be completed</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="p-4 border rounded-lg">
              <h3 className="font-semibold">Review Prescription</h3>
              <p className="text-sm text-gray-500">Patient: John Smith</p>
              <p className="text-sm text-gray-500">Due: 12/20/2024</p>
            </div>
            <div className="p-4 border rounded-lg">
              <h3 className="font-semibold">Verify Insurance</h3>
              <p className="text-sm text-gray-500">Patient: Sarah Johnson</p>
              <p className="text-sm text-gray-500">Due: 12/21/2024</p>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>In Progress</CardTitle>
            <CardDescription>Tasks currently being worked on</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="p-4 border rounded-lg">
              <h3 className="font-semibold">Prepare Medication</h3>
              <p className="text-sm text-gray-500">Patient: Mike Davis</p>
              <p className="text-sm text-gray-500">Started: 12/19/2024</p>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Completed</CardTitle>
            <CardDescription>Tasks that have been finished</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="p-4 border rounded-lg">
              <h3 className="font-semibold">Dispense Medication</h3>
              <p className="text-sm text-gray-500">Patient: Lisa Wilson</p>
              <p className="text-sm text-gray-500">Completed: 12/18/2024</p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )

  const renderScheduling = () => {
    // Helper function to generate time slots
    const generateTimeSlots = () => {
      const slots = []
      for (let i = 8; i <= 17; i++) {
        slots.push(`${i}:00`)
        if (i < 17) slots.push(`${i}:30`)
      }
      return slots
    }
    const timeSlots = generateTimeSlots()

    // Helper function to handle file input
    const handleFileUpload = (e: ChangeEvent<HTMLInputElement>, field: keyof NewPatientData) => {
      if (e.target.files && e.target.files.length > 0) {
        setNewPatientData((prev: NewPatientData) => ({ ...prev, [field]: e.target.files?.[0] || null }))
      }
    }

    // A simple multi-step form within the scheduling view
    const renderNewPatientForm = () => {
      // Form Steps
      const steps = [
        "Basic Info",
        "Address",
        "Contact Prefs",
        "Medical Info",
        "Account Settings",
        "Identification",
        "Financial Info",
        "Additional Info",
      ]

      return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          {showNewPatient && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <Card className="w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle>Add New Patient</CardTitle>
                      <CardDescription>Step {currentStep} of 8</CardDescription>
                    </div>
                    <Button variant="ghost" size="sm" onClick={() => setShowNewPatient(false)}>
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                  {/* Progress Bar */}
                  <div className="w-full bg-gray-200 rounded-full h-2.5 mt-4">
                    <div
                      className="bg-red-800 h-2.5 rounded-full"
                      style={{ width: `${(currentStep / steps.length) * 100}%` }}
                    ></div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-6">
                  {currentStep === 1 && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label>First Name</Label>
                        <Input
                          placeholder="First Name"
                          value={newPatientData.firstName}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, firstName: e.target.value }))
                          }
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Last Name</Label>
                        <Input
                          placeholder="Last Name"
                          value={newPatientData.lastName}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, lastName: e.target.value }))
                          }
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Email</Label>
                        <Input
                          type="email"
                          placeholder="Email"
                          value={newPatientData.email}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, email: e.target.value }))
                          }
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Phone Number</Label>
                        <Input
                          type="tel"
                          placeholder="Phone Number"
                          value={newPatientData.phone}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, phone: e.target.value }))
                          }
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Date of Birth</Label>
                        <Input
                          type="date"
                          value={newPatientData.dateOfBirth}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, dateOfBirth: e.target.value }))
                          }
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Gender</Label>
                        <Select
                          value={newPatientData.gender}
                          onValueChange={(value: string) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, gender: value }))
                          }
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select gender" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="male">Male</SelectItem>
                            <SelectItem value="female">Female</SelectItem>
                            <SelectItem value="other">Other</SelectItem>
                            <SelectItem value="prefer-not-to-say">Prefer not to say</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  )}

                  {currentStep === 2 && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label>Address Line 1</Label>
                        <Input
                          placeholder="Address Line 1"
                          value={newPatientData.address1}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, address1: e.target.value }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Address Line 2</Label>
                        <Input
                          placeholder="Address Line 2"
                          value={newPatientData.address2}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, address2: e.target.value }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>City</Label>
                        <Input
                          placeholder="City"
                          value={newPatientData.city}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, city: e.target.value }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>State</Label>
                        <Input
                          placeholder="State"
                          value={newPatientData.state}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, state: e.target.value }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>ZIP Code</Label>
                        <Input
                          placeholder="ZIP Code"
                          value={newPatientData.zip}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, zip: e.target.value }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Country</Label>
                        <Select
                          value={newPatientData.country}
                          onValueChange={(value: string) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, country: value }))
                          }
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="USA">United States</SelectItem>
                            <SelectItem value="Canada">Canada</SelectItem>
                            <SelectItem value="Mexico">Mexico</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  )}

                  {currentStep === 3 && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label>Notification Preference</Label>
                        <Select
                          value={newPatientData.notificationPreference}
                          onValueChange={(value: string) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, notificationPreference: value }))
                          }
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="email">Email</SelectItem>
                            <SelectItem value="sms">SMS</SelectItem>
                            <SelectItem value="phone">Phone</SelectItem>
                            <SelectItem value="mail">Mail</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label>Emergency Contact Name</Label>
                        <Input
                          placeholder="Emergency Contact Name"
                          value={newPatientData.emergencyContactName}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, emergencyContactName: e.target.value }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Emergency Contact Phone</Label>
                        <Input
                          placeholder="Emergency Contact Phone"
                          value={newPatientData.emergencyContactPhone}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({
                              ...prev,
                              emergencyContactPhone: e.target.value,
                            }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Emergency Contact Relation</Label>
                        <Input
                          placeholder="Emergency Contact Relation"
                          value={newPatientData.emergencyContactRelation}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({
                              ...prev,
                              emergencyContactRelation: e.target.value,
                            }))
                          }
                        />
                      </div>
                    </div>
                  )}

                  {currentStep === 4 && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label>Allergies</Label>
                        <Input
                          placeholder="Allergies"
                          value={newPatientData.allergies}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, allergies: e.target.value }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Medical Conditions</Label>
                        <Input
                          placeholder="Medical Conditions"
                          value={newPatientData.medicalConditions}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, medicalConditions: e.target.value }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Current Medications</Label>
                        <Input
                          placeholder="Current Medications"
                          value={newPatientData.currentMedications}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, currentMedications: e.target.value }))
                          }
                        />
                      </div>
                    </div>
                  )}

                  {currentStep === 5 && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label>Refill/Renew Status</Label>
                        <Select
                          value={newPatientData.refillRenewStatus}
                          onValueChange={(value: string) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, refillRenewStatus: value }))
                          }
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="active">Active</SelectItem>
                            <SelectItem value="inactive">Inactive</SelectItem>
                            <SelectItem value="suspended">Suspended</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label>Default Priority</Label>
                        <Select
                          value={newPatientData.defaultPriority}
                          onValueChange={(value: string) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, defaultPriority: value }))
                          }
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="low">Low</SelectItem>
                            <SelectItem value="medium">Medium</SelectItem>
                            <SelectItem value="high">High</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label>Delivery Method</Label>
                        <Select
                          value={newPatientData.deliveryMethod}
                          onValueChange={(value: string) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, deliveryMethod: value }))
                          }
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="pickup">Pickup</SelectItem>
                            <SelectItem value="delivery">Delivery</SelectItem>
                            <SelectItem value="mail">Mail</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  )}

                  {currentStep === 6 && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label>Bio Image</Label>
                        <Input type="file" onChange={(e) => handleFileUpload(e, "bioImage")} />
                      </div>
                      <div className="space-y-2">
                        <Label>Driver&apos;s License State</Label>
                        <Input
                          placeholder="State"
                          value={newPatientData.driversLicenseState}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, driversLicenseState: e.target.value }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Driver&apos;s License Number</Label>
                        <Input
                          placeholder="License Number"
                          value={newPatientData.driversLicenseNumber}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, driversLicenseNumber: e.target.value }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Driver&apos;s License Expiration</Label>
                        <Input
                          type="date"
                          value={newPatientData.driversLicenseExpiration}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({
                              ...prev,
                              driversLicenseExpiration: e.target.value,
                            }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Driver&apos;s License Front</Label>
                        <Input type="file" onChange={(e) => handleFileUpload(e, "driversLicenseFront")} />
                      </div>
                      <div className="space-y-2">
                        <Label>Driver&apos;s License Back</Label>
                        <Input type="file" onChange={(e) => handleFileUpload(e, "driversLicenseBack")} />
                      </div>
                      <div className="space-y-2">
                        <Label>MBI</Label>
                        <Input
                          placeholder="MBI"
                          value={newPatientData.mbi}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, mbi: e.target.value }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>SSN</Label>
                        <Input
                          placeholder="SSN"
                          value={newPatientData.ssn}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, ssn: e.target.value }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Alternate ID</Label>
                        <Input
                          placeholder="Alternate ID"
                          value={newPatientData.alternateId}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, alternateId: e.target.value }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Identification Expiration</Label>
                        <Input
                          type="date"
                          value={newPatientData.identificationExpiration}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({
                              ...prev,
                              identificationExpiration: e.target.value,
                            }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>External ID</Label>
                        <Input
                          placeholder="External ID"
                          value={newPatientData.externalId}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, externalId: e.target.value }))
                          }
                        />
                      </div>
                    </div>
                  )}

                  {currentStep === 7 && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label>Payment Method</Label>
                        <Select
                          value={newPatientData.paymentMethod}
                          onValueChange={(value: string) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, paymentMethod: value }))
                          }
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="credit">Credit Card</SelectItem>
                            <SelectItem value="ach">ACH</SelectItem>
                            <SelectItem value="cash">Cash</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      {newPatientData.paymentMethod === "credit" && (
                        <>
                          <div className="space-y-2">
                            <Label>Credit Card Type</Label>
                            <Select
                              value={newPatientData.creditCardType}
                              onValueChange={(value: string) =>
                                setNewPatientData((prev: NewPatientData) => ({ ...prev, creditCardType: value }))
                              }
                            >
                              <SelectTrigger>
                                <SelectValue placeholder="Select card type" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="visa">Visa</SelectItem>
                                <SelectItem value="mastercard">Mastercard</SelectItem>
                                <SelectItem value="amex">American Express</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                          <div className="space-y-2">
                            <Label>Credit Card Number</Label>
                            <Input
                              placeholder="Credit Card Number"
                              value={newPatientData.creditCardNumber}
                              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                setNewPatientData((prev: NewPatientData) => ({ ...prev, creditCardNumber: e.target.value }))
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>Expiration Date</Label>
                            <Input
                              placeholder="MM/YYYY"
                              value={newPatientData.creditCardExpiration}
                              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                setNewPatientData((prev: NewPatientData) => ({
                                  ...prev,
                                  creditCardExpiration: e.target.value,
                                }))
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>CVV</Label>
                            <Input
                              placeholder="CVV"
                              value={newPatientData.creditCardCVV}
                              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                setNewPatientData((prev: NewPatientData) => ({ ...prev, creditCardCVV: e.target.value }))
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>Cardholder Name</Label>
                            <Input
                              placeholder="Cardholder Name"
                              value={newPatientData.creditCardHolderName}
                              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                setNewPatientData((prev: NewPatientData) => ({
                                  ...prev,
                                  creditCardHolderName: e.target.value,
                                }))
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>Billing Address</Label>
                            <Input
                              placeholder="Billing Address"
                              value={newPatientData.creditCardBillingAddress}
                              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                setNewPatientData((prev: NewPatientData) => ({
                                  ...prev,
                                  creditCardBillingAddress: e.target.value,
                                }))
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>Billing City</Label>
                            <Input
                              placeholder="Billing City"
                              value={newPatientData.creditCardBillingCity}
                              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                setNewPatientData((prev: NewPatientData) => ({
                                  ...prev,
                                  creditCardBillingCity: e.target.value,
                                }))
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>Billing State</Label>
                            <Input
                              placeholder="Billing State"
                              value={newPatientData.creditCardBillingState}
                              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                setNewPatientData((prev: NewPatientData) => ({
                                  ...prev,
                                  creditCardBillingState: e.target.value,
                                }))
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>Billing ZIP</Label>
                            <Input
                              placeholder="Billing ZIP"
                              value={newPatientData.creditCardBillingZip}
                              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                setNewPatientData((prev: NewPatientData) => ({
                                  ...prev,
                                  creditCardBillingZip: e.target.value,
                                }))
                              }
                            />
                          </div>
                        </>
                      )}
                      {newPatientData.paymentMethod === "ach" && (
                        <>
                          <div className="space-y-2">
                            <Label>Account Type</Label>
                            <Select
                              value={newPatientData.achAccountType}
                              onValueChange={(value: string) =>
                                setNewPatientData((prev: NewPatientData) => ({ ...prev, achAccountType: value }))
                              }
                            >
                              <SelectTrigger>
                                <SelectValue placeholder="Select account type" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="checking">Checking</SelectItem>
                                <SelectItem value="savings">Savings</SelectItem>
                                <SelectItem value="business-checking">Business Checking</SelectItem>
                                <SelectItem value="business-savings">Business Savings</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                          <div className="space-y-2">
                            <Label>Bank Name</Label>
                            <Input
                              placeholder="Bank Name"
                              value={newPatientData.achBankName}
                              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                setNewPatientData((prev: NewPatientData) => ({ ...prev, achBankName: e.target.value }))
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>Routing Number</Label>
                            <Input
                              placeholder="Routing Number"
                              value={newPatientData.achRoutingNumber}
                              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                setNewPatientData((prev: NewPatientData) => ({ ...prev, achRoutingNumber: e.target.value }))
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>Account Number</Label>
                            <Input
                              placeholder="Account Number"
                              value={newPatientData.achAccountNumber}
                              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                setNewPatientData((prev: NewPatientData) => ({ ...prev, achAccountNumber: e.target.value }))
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>Account Holder Name</Label>
                            <Input
                              placeholder="Account Holder Name"
                              value={newPatientData.achAccountHolderName}
                              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                setNewPatientData((prev: NewPatientData) => ({
                                  ...prev,
                                  achAccountHolderName: e.target.value,
                                }))
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>Bank Address</Label>
                            <Input
                              placeholder="Bank Address"
                              value={newPatientData.achBankAddress}
                              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                setNewPatientData((prev: NewPatientData) => ({ ...prev, achBankAddress: e.target.value }))
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>Bank City</Label>
                            <Input
                              placeholder="Bank City"
                              value={newPatientData.achBankCity}
                              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                setNewPatientData((prev: NewPatientData) => ({ ...prev, achBankCity: e.target.value }))
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>Bank State</Label>
                            <Input
                              placeholder="Bank State"
                              value={newPatientData.achBankState}
                              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                setNewPatientData((prev: NewPatientData) => ({ ...prev, achBankState: e.target.value }))
                              }
                            />
                          </div>
                          <div className="space-y-2">
                            <Label>Bank ZIP</Label>
                            <Input
                              placeholder="Bank ZIP"
                              value={newPatientData.achBankZip}
                              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                setNewPatientData((prev: NewPatientData) => ({ ...prev, achBankZip: e.target.value }))
                              }
                            />
                          </div>
                        </>
                      )}
                    </div>
                  )}

                  {currentStep === 8 && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2 col-span-2">
                        <Label>Critical Comments</Label>
                        <textarea
                          placeholder="Critical comments about the patient"
                          value={newPatientData.criticalComments}
                          onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, criticalComments: e.target.value }))
                          }
                          className="w-full min-h-[100px] p-3 border border-gray-300 rounded-md"
                        />
                      </div>
                      <div className="space-y-2 col-span-2">
                        <Label>Facility</Label>
                        <Select
                          value={newPatientData.facility}
                          onValueChange={(value: string) =>
                            setNewPatientData((prev: NewPatientData) => ({ ...prev, facility: value }))
                          }
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Main Location">Main Location</SelectItem>
                            <SelectItem value="Downtown Clinic">Downtown Clinic</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  )}
                </CardContent>
                <div className="flex justify-between p-6 border-t">
                  <Button variant="outline" onClick={() => setCurrentStep((prev: number) => Math.max(1, prev - 1))}>
                    Previous
                  </Button>
                  <Button
                    className="bg-red-800 hover:bg-red-900"
                    onClick={() => {
                      if (currentStep < 8) {
                        setCurrentStep((prev: number) => prev + 1)
                      } else {
                        // Final step, handle submission
                        console.log("New Patient Data:", newPatientData)
                        setShowNewPatient(false)
                      }
                    }}
                  >
                    {currentStep < 8 ? "Next" : "Save Patient"}
                  </Button>
                </div>
              </Card>
            </div>
          )}
        </div>
      )
    }

    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h2 className="text-3xl font-bold">Scheduling</h2>
          <div className="flex items-center gap-4">
            <Button variant="outline" size="sm" onClick={() => setShowNewPatient(true)}>
              <Plus className="h-4 w-4 mr-2" />
              New Appointment
            </Button>
            <Button variant="outline" size="sm">
              Export Schedule
            </Button>
          </div>
        </div>
        <Card>
          <CardHeader>
            <CardTitle>Calendar</CardTitle>
            <CardDescription>View and manage appointments</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-7 gap-2 text-center text-sm font-medium">
              {["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"].map((day) => (
                <div key={day} className="p-2">
                  {day}
                </div>
              ))}
              {Array.from({ length: 35 }, (_, i) => {
                const date = i - 5 // Start from a few days before the 1st
                const fullDate = new Date(new Date().getFullYear(), new Date().getMonth(), date)
                const isSelected = selectedDate === fullDate.toISOString().split("T")[0]
                return (
                  <div
                    key={i}
                    onClick={() => handleDateClick(fullDate.toISOString().split("T")[0])}
                    className={`p-4 border rounded-lg cursor-pointer ${
                      isSelected ? "bg-red-800 text-white" : "hover:bg-gray-100"
                    }`}
                  >
                    {fullDate.getDate()}
                  </div>
                )
              })}
            </div>
          </CardContent>
        </Card>

        {showDayAppointments && (
          <Card>
            <CardHeader>
              <CardTitle>Appointments for {selectedDate}</CardTitle>
              <CardDescription>Manage appointments for the selected day</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {dayAppointments.map((appointment) => (
                  <div key={appointment.id} className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="grid grid-cols-4 gap-4 flex-1">
                      <div>
                        <p className="font-medium">{appointment.time}</p>
                      </div>
                      <div>
                        <p className="font-medium">{appointment.patient}</p>
                      </div>
                      <div>
                        <p className="text-sm">{appointment.type}</p>
                      </div>
                      <div>
                        <Badge
                          className={
                            appointment.status === "Confirmed"
                              ? "bg-green-100 text-green-800"
                              : "bg-yellow-100 text-yellow-800"
                          }
                        >
                          {appointment.status}
                        </Badge>
                      </div>
                    </div>
                    <Button variant="outline" size="sm">
                      View Details
                    </Button>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {renderNewPatientForm()}
      </div>
    )
  }

  const renderToolsPopup = () => (
    <aside
      className={`fixed top-0 right-0 z-50 h-screen w-full max-w-xl bg-white shadow-lg transition-transform duration-300 ease-in-out ${
        showTools ? "translate-x-0" : "translate-x-full"
      }`}
    >
      <div className="flex items-center justify-between p-4 border-b bg-gray-50">
        <h2 className="text-xl font-bold">Tools</h2>
        <Button variant="ghost" size="icon" onClick={() => setShowTools(false)}>
          <X className="h-5 w-5" />
        </Button>
      </div>
      <div className="p-6 overflow-y-auto h-[calc(100vh-65px)]">{renderFormulaCalculator()}</div>
    </aside>
  )

  const getPageContent = () => {
    switch (activeHeader) {
      case "orders":
        return (
          <div className="space-y-6">
            <h2 className="text-3xl font-bold">Orders</h2>
            <Card className="mt-4">
              <CardContent>
                <p>Order management and tracking will appear here.</p>
              </CardContent>
            </Card>
          </div>
        )
      case "account":
        return renderAccount()
      case "patients":
        return renderPatients()
      case "rxforms":
        return (
          <div className="space-y-6">
            <h2 className="text-3xl font-bold">RX Forms</h2>
            <Card className="mt-4">
              <CardContent>
                <p>Prescription forms and e-script tools will appear here.</p>
              </CardContent>
            </Card>
          </div>
        )
      case "catalog":
        return (
          <div className="space-y-6">
            <h2 className="text-3xl font-bold">Catalog</h2>
            <Card className="mt-4">
              <CardContent>
                <p>Product and medication catalog will appear here.</p>
              </CardContent>
            </Card>
          </div>
        )
      case "scheduling":
        return renderScheduling()
      case "contactdca":
        return (
          <div className="space-y-6">
            <h2 className="text-3xl font-bold">Contact DCA</h2>
            <Card className="mt-4">
              <CardContent>
                <p>Contact information and support for DCA will appear here.</p>
              </CardContent>
            </Card>
          </div>
        )
      default:
        return renderDashboard()
    }
  }

  return (
    <div className="flex h-screen bg-gray-50">
      {/* Sidebar */}
      <aside
        className={`bg-white shadow-lg transition-all duration-300 ease-in-out ${
          sidebarCollapsed ? "w-20" : "w-64"
        }`}
      >
        <div className="flex items-center justify-between p-4 border-b">
          {!sidebarCollapsed && <h1 className="text-xl font-bold text-red-800">Facility Acct Name</h1>}
          <Button variant="ghost" size="sm" onClick={() => setSidebarCollapsed(!sidebarCollapsed)}>
            {sidebarCollapsed ? "→" : "←"}
          </Button>
        </div>
        <nav className="flex-1 p-4 space-y-2">
          {MAIN_HEADERS.map((header) => {
            const IconComponent = header.icon
            return (
              <button
                key={header.id}
                onClick={() => handleHeaderChange(header.id)}
                className={`w-full flex items-center p-3 rounded-lg transition-colors ${
                  activeHeader === header.id
                    ? "bg-red-800 text-white"
                    : "text-gray-700 hover:bg-red-50 hover:text-red-800"
                } ${sidebarCollapsed ? "justify-center" : ""}`}
              >
                <IconComponent className="h-6 w-6" />
                {!sidebarCollapsed && <span className="ml-4 font-medium">{header.title}</span>}
              </button>
            )
          })}
        </nav>
      </aside>

      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        {/* Top Bar */}
        <header className="flex items-center justify-between p-4 bg-white border-b shadow-sm">
          <div className="flex items-center">
            <h2 className="text-2xl font-semibold text-gray-800">
              {MAIN_HEADERS.find((h) => h.id === activeHeader)?.title}
            </h2>
          </div>
          <div className="flex items-center gap-6">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
              <Input placeholder="Search..." className="pl-10 w-64" />
            </div>
            <Button variant="ghost" size="icon" onClick={() => setShowTools(true)}>
              <Wrench className="h-6 w-6 text-gray-600" />
            </Button>
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => window.location.href = '/login'}
              className="border-red-800 text-red-800 hover:bg-red-50"
            >
              Login
            </Button>
            <div className="relative">
              <Button variant="ghost" size="icon" onClick={() => setShowUserMenu(!showUserMenu)}>
                <img
                  src={userProfile.avatar}
                  alt="User Avatar"
                  className="h-10 w-10 rounded-full border-2 border-red-800"
                />
              </Button>
              {showUserMenu && (
                <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-xl z-50">
                  <div className="p-4 border-b">
                    <p className="font-semibold">{userProfile.name}</p>
                    <p className="text-sm text-gray-500">{userProfile.role}</p>
                  </div>
                  <div className="py-2">
                    <button
                      onClick={() => handleHeaderChange("account")}
                      className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    >
                      My Profile
                    </button>
                    <button
                      onClick={() => setShowSettings(true)}
                      className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    >
                      Settings
                    </button>
                    <button className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                      Logout
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </header>

        {/* Page Content */}
        <main className="flex-1 p-6 overflow-y-auto">{getPageContent()}</main>
      </div>

      {/* New Rx Modal */}
      {showNewRxModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <Card className="w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>New Patient Rx Order</CardTitle>
                  <CardDescription>Step {newRxStep} of 3: {newRxStep === 1 ? 'Patient Search' : newRxStep === 2 ? 'Add Rx' : 'Bill/Ship Preference'}</CardDescription>
                </div>
                <Button variant="ghost" size="sm" onClick={() => setShowNewRxModal(false)}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-6">
              {newRxStep === 1 && (
                <div>
                  <h3 className="font-semibold text-lg mb-4">Step 1: Patient Search</h3>
                  <div className="space-y-4">
                    <div>
                      <Label>Search for Patient</Label>
                      <Input
                        placeholder="Enter patient name, email, or phone"
                        value={patientSearchQuery}
                        onChange={(e) => setPatientSearchQuery(e.target.value)}
                      />
                    </div>
                    {patientSearchQuery && (
                      <div className="space-y-2">
                        <h4 className="font-medium">Search Results:</h4>
                        {filteredPatients.length > 0 ? (
                          <div className="space-y-2">
                            {filteredPatients.map((patient) => (
                              <div
                                key={patient.id}
                                className="p-3 border rounded-lg cursor-pointer hover:bg-gray-50"
                                onClick={() => {
                                  setSelectedPatient(patient)
                                  setNewRxStep(2)
                                }}
                              >
                                <div className="font-medium">{patient.name}</div>
                                <div className="text-sm text-gray-500">{patient.email} • {patient.phone}</div>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <div className="text-center py-4">
                            <p className="text-gray-500">No patients found</p>
                            <Button 
                              variant="outline" 
                              className="mt-2"
                              onClick={() => setShowNewPatientForm(true)}
                            >
                              Create New Patient
                            </Button>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              )}

              {newRxStep === 2 && (
                <div>
                  <h3 className="font-semibold text-lg mb-4">Step 2: Add Rx</h3>
                  <div className="space-y-4">
                    <div className="p-4 bg-gray-50 rounded-lg">
                      <h4 className="font-medium mb-2">Selected Patient:</h4>
                      <p>{selectedPatient?.name}</p>
                      <p className="text-sm text-gray-500">{selectedPatient?.email} • {selectedPatient?.phone}</p>
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label>Medication</Label>
                        <Input placeholder="Enter medication name" />
                      </div>
                      <div>
                        <Label>Strength</Label>
                        <Input placeholder="e.g., 200mg/ml" />
                      </div>
                      <div>
                        <Label>Quantity</Label>
                        <Input placeholder="e.g., 10ml vial" />
                      </div>
                      <div>
                        <Label>Directions</Label>
                        <Input placeholder="e.g., Inject 0.5ml weekly" />
                      </div>
                    </div>
                    <div className="flex justify-end space-x-2">
                      <Button variant="outline" onClick={() => setNewRxStep(1)}>
                        Back
                      </Button>
                      <Button onClick={() => setNewRxStep(3)}>
                        Continue
                      </Button>
                    </div>
                  </div>
                </div>
              )}

              {newRxStep === 3 && (
                <div>
                  <h3 className="font-semibold text-lg mb-4">Step 3: Bill/Ship Preference</h3>
                  <div className="space-y-4">
                    <div>
                      <Label>Select Bill/Ship Preference</Label>
                      <Select value={billShipPreference} onValueChange={(value: any) => setBillShipPreference(value)}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="BF/SP">BF/SP (Bill Facility, Ship Patient)</SelectItem>
                          <SelectItem value="BF/SF">BF/SF (Bill Facility, Ship Facility)</SelectItem>
                          <SelectItem value="SF/BP">SF/BP (Ship Facility, Bill Patient)</SelectItem>
                          <SelectItem value="SF/BF">SF/BF (Ship Facility, Bill Facility)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    {billShipPreference === 'BF/SP' && (
                      <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                        <h4 className="font-medium text-yellow-800 mb-2">BF/SP Selected</h4>
                        <p className="text-sm text-yellow-700 mb-3">Choose patient type:</p>
                        <div className="space-y-2">
                          <Button 
                            variant="outline" 
                            className="w-full justify-start"
                            onClick={() => {
                              alert('Order put on hold and patient notified')
                              setShowNewRxModal(false)
                            }}
                          >
                            Existing Patient - Put on hold and notify patient
                          </Button>
                          <Button 
                            variant="outline" 
                            className="w-full justify-start"
                            onClick={() => {
                              alert('Order put on hold, welcome notification and payment outreach sent')
                              setShowNewRxModal(false)
                            }}
                          >
                            New Patient - Put on hold, welcome notify and payment outreach
                          </Button>
                        </div>
                      </div>
                    )}

                    {(billShipPreference === 'BF/SF' || billShipPreference === 'SF/BP') && (
                      <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                        <h4 className="font-medium text-blue-800 mb-2">Auto Route to Office Order Queue</h4>
                        <p className="text-sm text-blue-700 mb-3">This order will be automatically routed to the office order queue.</p>
                        <Button 
                          onClick={() => {
                            alert('Order routed to office order queue')
                            setShowNewRxModal(false)
                          }}
                        >
                          Confirm and Route
                        </Button>
                      </div>
                    )}

                    <div className="flex justify-end space-x-2">
                      <Button variant="outline" onClick={() => setNewRxStep(2)}>
                        Back
                      </Button>
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      )}

      {/* In Process Rx Component */}
      {showInProcessRx && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <Card className="w-full max-w-6xl mx-4 max-h-[90vh] overflow-y-auto">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>Patient Rx - In Process</CardTitle>
                  <CardDescription>Manage patient prescriptions by prescriber and status</CardDescription>
                </div>
                <Button variant="ghost" size="sm" onClick={() => setShowInProcessRx(false)}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Filters */}
              <div className="grid grid-cols-3 gap-4">
                <div>
                  <Label>Prescriber</Label>
                  <Select value={selectedPrescriber} onValueChange={setSelectedPrescriber}>
                    <SelectTrigger>
                      <SelectValue placeholder="All Prescribers" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="">All Prescribers</SelectItem>
                      <SelectItem value="Dr. Johnson">Dr. Johnson</SelectItem>
                      <SelectItem value="Dr. Williams">Dr. Williams</SelectItem>
                      <SelectItem value="Dr. Brown">Dr. Brown</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label>Status</Label>
                  <Select value={selectedRxStatus} onValueChange={setSelectedRxStatus}>
                    <SelectTrigger>
                      <SelectValue placeholder="All Status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Status</SelectItem>
                      <SelectItem value="waiting-input">Waiting for Input</SelectItem>
                      <SelectItem value="waiting-payment">Waiting for Payment</SelectItem>
                      <SelectItem value="missing-info">Missing Information</SelectItem>
                      <SelectItem value="pre-check">Pre-Check</SelectItem>
                      <SelectItem value="being-filled">Being Filled</SelectItem>
                      <SelectItem value="complete">Complete</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label>Date Range</Label>
                  <Select value={selectedDateRange} onValueChange={setSelectedDateRange}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="today">Today</SelectItem>
                      <SelectItem value="7days">Last 7 Days</SelectItem>
                      <SelectItem value="14days">Last 14 Days</SelectItem>
                      <SelectItem value="month">This Month</SelectItem>
                      <SelectItem value="6months">Last 6 Months</SelectItem>
                      <SelectItem value="12months">Last 12 Months</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* In Process Rx Table */}
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left p-2 font-medium">Patient</th>
                      <th className="text-left p-2 font-medium">Medication</th>
                      <th className="text-left p-2 font-medium">Prescriber</th>
                      <th className="text-left p-2 font-medium">Status</th>
                      <th className="text-left p-2 font-medium">Date</th>
                      <th className="text-left p-2 font-medium">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {inProcessRxOrders.map((rx) => (
                      <tr key={rx.id} className="border-b hover:bg-gray-50">
                        <td className="p-2">
                          <div>
                            <div className="font-medium">{rx.patientName}</div>
                            <div className="text-sm text-gray-500">{rx.patientPhone}</div>
                          </div>
                        </td>
                        <td className="p-2">
                          <div>
                            <div className="font-medium">{rx.medication}</div>
                            <div className="text-sm text-gray-500">{rx.quantity}</div>
                          </div>
                        </td>
                        <td className="p-2 text-sm">{rx.prescriber}</td>
                        <td className="p-2">
                          <Badge className={getRxStatusColor(rx.status)}>
                            {rx.status}
                          </Badge>
                        </td>
                        <td className="p-2 text-sm">{rx.date}</td>
                        <td className="p-2">
                          <div className="flex space-x-1">
                            <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                              <Edit className="h-3 w-3" />
                            </Button>
                            <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                              <User className="h-3 w-3" />
                            </Button>
                            <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                              <Pill className="h-3 w-3" />
                            </Button>
                            <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                              <Package className="h-3 w-3" />
                            </Button>
                            <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                              <X className="h-3 w-3" />
                            </Button>
                            <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                              <AlertTriangle className="h-3 w-3" />
                            </Button>
                            <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                              <Calendar className="h-3 w-3" />
                            </Button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Settings Modal */}
      {showSettings && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <Card className="w-full max-w-2xl mx-4">
            <CardHeader>
              <CardTitle>Settings</CardTitle>
              <CardDescription>Manage your account and application settings</CardDescription>
            </CardHeader>
            <div className="flex">
              {/* Sidebar Tabs */}
              <div className="w-48 border-r bg-gray-50 p-4 space-y-2">
                {[
                  { id: 'profile', label: 'Profile & Account' },
                  { id: 'security', label: 'Security' },
                  { id: 'notifications', label: 'Notifications' },
                  { id: 'payment', label: 'Payment & Billing' },
                  { id: 'integrations', label: 'Integrations' },
                  { id: 'compliance', label: 'Compliance & Privacy' },
                  { id: 'users', label: 'User Management' },
                  { id: 'preferences', label: 'Preferences' },
                  { id: 'api', label: 'API Access' },
                  { id: 'devices', label: 'Connected Devices' },
                ].map(tab => (
                  <button
                    key={tab.id}
                    className={`w-full text-left px-3 py-2 rounded-lg transition-colors ${settingsTab === tab.id ? 'bg-red-800 text-white' : 'text-gray-700 hover:bg-red-100'}`}
                    onClick={() => setSettingsTab(tab.id)}
                  >
                    {tab.label}
                  </button>
                ))}
              </div>
              {/* Tab Content */}
              <CardContent className="flex-1 p-6 overflow-y-auto max-h-[70vh]">
                {settingsTab === 'profile' && (
                  <div>
                    <h3 className="font-semibold text-lg mb-2">Profile & Account</h3>
                    <div className="space-y-4">
                      <div>
                        <Label>Name</Label>
                        <Input value={userProfile.name} readOnly />
                      </div>
                      <div>
                        <Label>Email</Label>
                        <Input value="amanda@pharmacy.com" readOnly />
                      </div>
                      <div>
                        <Label>Role</Label>
                        <Input value={userProfile.role} readOnly />
                      </div>
                    </div>
                  </div>
                )}
                {settingsTab === 'security' && (
                  <div>
                    <h3 className="font-semibold text-lg mb-2">Security</h3>
                    <div className="space-y-4">
                      <div>
                        <Label>Password</Label>
                        <Input type="password" value="********" readOnly />
                        <Button variant="outline" className="mt-2">Change Password</Button>
                      </div>
                      <div>
                        <Label>Two-Factor Authentication</Label>
                        <Button variant="outline" className="mt-2">Enable 2FA</Button>
                      </div>
                    </div>
                  </div>
                )}
                {settingsTab === 'notifications' && (
                  <div>
                    <h3 className="font-semibold text-lg mb-2">Notifications</h3>
                    <div className="space-y-4">
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" id="email-notifications" defaultChecked />
                        <Label htmlFor="email-notifications">Email Notifications</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <input type="checkbox" id="sms-notifications" />
                        <Label htmlFor="sms-notifications">SMS Notifications</Label>
                      </div>
                    </div>
                  </div>
                )}
                {settingsTab === 'payment' && (
                  <div>
                    <h3 className="font-semibold text-lg mb-2">Payment & Billing</h3>
                    <div className="space-y-4">
                      <div>
                        <Label>Payment Method</Label>
                        <Select>
                          <SelectTrigger>
                            <SelectValue placeholder="Select payment method" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="credit">Credit Card</SelectItem>
                            <SelectItem value="ach">ACH</SelectItem>
                            <SelectItem value="cash">Cash</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label>Billing Address</Label>
                        <Input placeholder="Billing Address" />
                      </div>
                    </div>
                  </div>
                )}
                {settingsTab === 'integrations' && (
                  <div>
                    <h3 className="font-semibold text-lg mb-2">Integrations</h3>
                    <div className="space-y-4">
                      <div>
                        <Label>SureScripts</Label>
                        <Button variant="outline">Connect</Button>
                      </div>
                      <div>
                        <Label>EHR Integration</Label>
                        <Button variant="outline">Connect</Button>
                      </div>
                    </div>
                  </div>
                )}
                {settingsTab === 'compliance' && (
                  <div>
                    <h3 className="font-semibold text-lg mb-2">Compliance & Privacy</h3>
                    <div className="space-y-4">
                      <div>
                        <Label>HIPAA Compliance</Label>
                        <Input value="Enabled" readOnly />
                      </div>
                      <div>
                        <Label>Data Retention Policy</Label>
                        <Input value="7 years" readOnly />
                      </div>
                    </div>
                  </div>
                )}
                {settingsTab === 'users' && (
                  <div>
                    <h3 className="font-semibold text-lg mb-2">User Management</h3>
                    <div className="space-y-4">
                      <Button variant="outline">Invite User</Button>
                      <div className="mt-2">User list and permissions would be shown here.</div>
                    </div>
                  </div>
                )}
                {settingsTab === 'preferences' && (
                  <div>
                    <h3 className="font-semibold text-lg mb-2">Preferences</h3>
                    <div className="space-y-4">
                      <div>
                        <Label>Theme</Label>
                        <Select>
                          <SelectTrigger>
                            <SelectValue placeholder="Select theme" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="light">Light</SelectItem>
                            <SelectItem value="dark">Dark</SelectItem>
                            <SelectItem value="system">System</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label>Language</Label>
                        <Select>
                          <SelectTrigger>
                            <SelectValue placeholder="Select language" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="en">English</SelectItem>
                            <SelectItem value="es">Spanish</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label>Accessibility</Label>
                        <Button variant="outline">Accessibility Options</Button>
                      </div>
                    </div>
                  </div>
                )}
                {settingsTab === 'api' && (
                  <div>
                    <h3 className="font-semibold text-lg mb-2">API Access</h3>
                    <div className="space-y-4">
                      <Button variant="outline">Generate API Key</Button>
                      <div className="mt-2">API keys and usage would be shown here.</div>
                    </div>
                  </div>
                )}
                {settingsTab === 'devices' && (
                  <div>
                    <h3 className="font-semibold text-lg mb-2">Connected Devices</h3>
                    <div className="space-y-4">
                      <Button variant="outline">Add Device</Button>
                      <div className="mt-2">List of connected devices would be shown here.</div>
                    </div>
                  </div>
                )}
              </CardContent>
            </div>
            <div className="flex justify-end gap-4 p-6 border-t">
              <Button variant="outline" onClick={() => setShowSettings(false)}>
                Cancel
              </Button>
              <Button className="bg-red-800 hover:bg-red-900">Save</Button>
            </div>
          </Card>
        </div>
      )}

      {/* DCA Script Modal */}
      {showNewEScript && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg w-full max-w-4xl max-h-[90vh] overflow-hidden">
            {/* Header */}
            <div className="flex items-center justify-between p-6 border-b bg-gradient-to-r from-red-800 to-red-600 text-white">
              <div>
                <h2 className="text-2xl font-bold">DCA Script</h2>
                <p className="text-red-100">Digital Controlled Access Prescription</p>
              </div>
              <Button variant="ghost" size="icon" onClick={() => setShowNewEScript(false)} className="text-white hover:bg-red-700">
                <X className="h-5 w-5" />
              </Button>
            </div>

            {/* Content */}
            <div className="p-6 overflow-y-auto max-h-[70vh]">
              <div className="text-center py-8">
                <Pill className="h-16 w-16 mx-auto mb-4 text-red-600" />
                <h3 className="text-xl font-semibold mb-2">DCA Script Form</h3>
                <p className="text-gray-600 mb-6">Comprehensive prescription form for controlled substances</p>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-2xl mx-auto">
                  <Card className="p-4">
                    <div className="flex items-center gap-3 mb-3">
                      <User className="h-5 w-5 text-blue-600" />
                      <h4 className="font-semibold">Patient Information</h4>
                    </div>
                    <p className="text-sm text-gray-600">Enter patient details, contact information, and insurance</p>
                  </Card>
                  
                  <Card className="p-4">
                    <div className="flex items-center gap-3 mb-3">
                      <Stethoscope className="h-5 w-5 text-green-600" />
                      <h4 className="font-semibold">Prescriber Details</h4>
                    </div>
                    <p className="text-sm text-gray-600">Doctor information, NPI, DEA numbers, and practice details</p>
                  </Card>
                  
                  <Card className="p-4">
                    <div className="flex items-center gap-3 mb-3">
                      <Pill className="h-5 w-5 text-purple-600" />
                      <h4 className="font-semibold">Medication Details</h4>
                    </div>
                    <p className="text-sm text-gray-600">Drug information, dosage, directions, and special requirements</p>
                  </Card>
                  
                  <Card className="p-4">
                    <div className="flex items-center gap-3 mb-3">
                      <Building className="h-5 w-5 text-orange-600" />
                      <h4 className="font-semibold">Pharmacy Information</h4>
                    </div>
                    <p className="text-sm text-gray-600">Target pharmacy details and contact information</p>
                  </Card>
                </div>
                
                <div className="mt-8">
                  <Button 
                    className="bg-red-800 hover:bg-red-900 px-8 py-3"
                    onClick={() => {
                      // This would open the full form
                      alert("Full DCA Script form would open here with 5-step wizard")
                    }}
                  >
                    Start DCA Script
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      <ToolsPopup showTools={showTools} setShowTools={setShowTools} />
    </div>
  )
}


